// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_layer_setting.proto

#ifndef PROTOBUF_obstacle_5flayer_5fsetting_2eproto__INCLUDED
#define PROTOBUF_obstacle_5flayer_5fsetting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_costmap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_obstacle_5flayer_5fsetting_2eproto();
void protobuf_AssignDesc_obstacle_5flayer_5fsetting_2eproto();
void protobuf_ShutdownFile_obstacle_5flayer_5fsetting_2eproto();

class ParaObstacleLayer;

// ===================================================================

class ParaObstacleLayer : public ::google::protobuf::Message {
 public:
  ParaObstacleLayer();
  virtual ~ParaObstacleLayer();

  ParaObstacleLayer(const ParaObstacleLayer& from);

  inline ParaObstacleLayer& operator=(const ParaObstacleLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParaObstacleLayer& default_instance();

  void Swap(ParaObstacleLayer* other);

  // implements Message ----------------------------------------------

  ParaObstacleLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParaObstacleLayer& from);
  void MergeFrom(const ParaObstacleLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double observation_keep_time = 1;
  inline bool has_observation_keep_time() const;
  inline void clear_observation_keep_time();
  static const int kObservationKeepTimeFieldNumber = 1;
  inline double observation_keep_time() const;
  inline void set_observation_keep_time(double value);

  // required double expected_update_rate = 2;
  inline bool has_expected_update_rate() const;
  inline void clear_expected_update_rate();
  static const int kExpectedUpdateRateFieldNumber = 2;
  inline double expected_update_rate() const;
  inline void set_expected_update_rate(double value);

  // required double min_obstacle_height = 3;
  inline bool has_min_obstacle_height() const;
  inline void clear_min_obstacle_height();
  static const int kMinObstacleHeightFieldNumber = 3;
  inline double min_obstacle_height() const;
  inline void set_min_obstacle_height(double value);

  // required double max_obstacle_height = 4;
  inline bool has_max_obstacle_height() const;
  inline void clear_max_obstacle_height();
  static const int kMaxObstacleHeightFieldNumber = 4;
  inline double max_obstacle_height() const;
  inline void set_max_obstacle_height(double value);

  // required double obstacle_range = 5;
  inline bool has_obstacle_range() const;
  inline void clear_obstacle_range();
  static const int kObstacleRangeFieldNumber = 5;
  inline double obstacle_range() const;
  inline void set_obstacle_range(double value);

  // required double raytrace_range = 6;
  inline bool has_raytrace_range() const;
  inline void clear_raytrace_range();
  static const int kRaytraceRangeFieldNumber = 6;
  inline double raytrace_range() const;
  inline void set_raytrace_range(double value);

  // required double transform_tolerance = 7;
  inline bool has_transform_tolerance() const;
  inline void clear_transform_tolerance();
  static const int kTransformToleranceFieldNumber = 7;
  inline double transform_tolerance() const;
  inline void set_transform_tolerance(double value);

  // required string topic_string = 8;
  inline bool has_topic_string() const;
  inline void clear_topic_string();
  static const int kTopicStringFieldNumber = 8;
  inline const ::std::string& topic_string() const;
  inline void set_topic_string(const ::std::string& value);
  inline void set_topic_string(const char* value);
  inline void set_topic_string(const char* value, size_t size);
  inline ::std::string* mutable_topic_string();
  inline ::std::string* release_topic_string();
  inline void set_allocated_topic_string(::std::string* topic_string);

  // required string sensor_frame = 9;
  inline bool has_sensor_frame() const;
  inline void clear_sensor_frame();
  static const int kSensorFrameFieldNumber = 9;
  inline const ::std::string& sensor_frame() const;
  inline void set_sensor_frame(const ::std::string& value);
  inline void set_sensor_frame(const char* value);
  inline void set_sensor_frame(const char* value, size_t size);
  inline ::std::string* mutable_sensor_frame();
  inline ::std::string* release_sensor_frame();
  inline void set_allocated_sensor_frame(::std::string* sensor_frame);

  // required bool inf_is_valid = 10;
  inline bool has_inf_is_valid() const;
  inline void clear_inf_is_valid();
  static const int kInfIsValidFieldNumber = 10;
  inline bool inf_is_valid() const;
  inline void set_inf_is_valid(bool value);

  // required bool clearing = 11;
  inline bool has_clearing() const;
  inline void clear_clearing();
  static const int kClearingFieldNumber = 11;
  inline bool clearing() const;
  inline void set_clearing(bool value);

  // required bool marking = 12;
  inline bool has_marking() const;
  inline void clear_marking();
  static const int kMarkingFieldNumber = 12;
  inline bool marking() const;
  inline void set_marking(bool value);

  // required bool footprint_clearing_enabled = 13;
  inline bool has_footprint_clearing_enabled() const;
  inline void clear_footprint_clearing_enabled();
  static const int kFootprintClearingEnabledFieldNumber = 13;
  inline bool footprint_clearing_enabled() const;
  inline void set_footprint_clearing_enabled(bool value);

  // required bool is_debug = 14;
  inline bool has_is_debug() const;
  inline void clear_is_debug();
  static const int kIsDebugFieldNumber = 14;
  inline bool is_debug() const;
  inline void set_is_debug(bool value);

  // @@protoc_insertion_point(class_scope:roborts_costmap.ParaObstacleLayer)
 private:
  inline void set_has_observation_keep_time();
  inline void clear_has_observation_keep_time();
  inline void set_has_expected_update_rate();
  inline void clear_has_expected_update_rate();
  inline void set_has_min_obstacle_height();
  inline void clear_has_min_obstacle_height();
  inline void set_has_max_obstacle_height();
  inline void clear_has_max_obstacle_height();
  inline void set_has_obstacle_range();
  inline void clear_has_obstacle_range();
  inline void set_has_raytrace_range();
  inline void clear_has_raytrace_range();
  inline void set_has_transform_tolerance();
  inline void clear_has_transform_tolerance();
  inline void set_has_topic_string();
  inline void clear_has_topic_string();
  inline void set_has_sensor_frame();
  inline void clear_has_sensor_frame();
  inline void set_has_inf_is_valid();
  inline void clear_has_inf_is_valid();
  inline void set_has_clearing();
  inline void clear_has_clearing();
  inline void set_has_marking();
  inline void clear_has_marking();
  inline void set_has_footprint_clearing_enabled();
  inline void clear_has_footprint_clearing_enabled();
  inline void set_has_is_debug();
  inline void clear_has_is_debug();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double observation_keep_time_;
  double expected_update_rate_;
  double min_obstacle_height_;
  double max_obstacle_height_;
  double obstacle_range_;
  double raytrace_range_;
  double transform_tolerance_;
  ::std::string* topic_string_;
  ::std::string* sensor_frame_;
  bool inf_is_valid_;
  bool clearing_;
  bool marking_;
  bool footprint_clearing_enabled_;
  bool is_debug_;
  friend void  protobuf_AddDesc_obstacle_5flayer_5fsetting_2eproto();
  friend void protobuf_AssignDesc_obstacle_5flayer_5fsetting_2eproto();
  friend void protobuf_ShutdownFile_obstacle_5flayer_5fsetting_2eproto();

  void InitAsDefaultInstance();
  static ParaObstacleLayer* default_instance_;
};
// ===================================================================


// ===================================================================

// ParaObstacleLayer

// required double observation_keep_time = 1;
inline bool ParaObstacleLayer::has_observation_keep_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParaObstacleLayer::set_has_observation_keep_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParaObstacleLayer::clear_has_observation_keep_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParaObstacleLayer::clear_observation_keep_time() {
  observation_keep_time_ = 0;
  clear_has_observation_keep_time();
}
inline double ParaObstacleLayer::observation_keep_time() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.observation_keep_time)
  return observation_keep_time_;
}
inline void ParaObstacleLayer::set_observation_keep_time(double value) {
  set_has_observation_keep_time();
  observation_keep_time_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.observation_keep_time)
}

// required double expected_update_rate = 2;
inline bool ParaObstacleLayer::has_expected_update_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParaObstacleLayer::set_has_expected_update_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParaObstacleLayer::clear_has_expected_update_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParaObstacleLayer::clear_expected_update_rate() {
  expected_update_rate_ = 0;
  clear_has_expected_update_rate();
}
inline double ParaObstacleLayer::expected_update_rate() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.expected_update_rate)
  return expected_update_rate_;
}
inline void ParaObstacleLayer::set_expected_update_rate(double value) {
  set_has_expected_update_rate();
  expected_update_rate_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.expected_update_rate)
}

// required double min_obstacle_height = 3;
inline bool ParaObstacleLayer::has_min_obstacle_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParaObstacleLayer::set_has_min_obstacle_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParaObstacleLayer::clear_has_min_obstacle_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParaObstacleLayer::clear_min_obstacle_height() {
  min_obstacle_height_ = 0;
  clear_has_min_obstacle_height();
}
inline double ParaObstacleLayer::min_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.min_obstacle_height)
  return min_obstacle_height_;
}
inline void ParaObstacleLayer::set_min_obstacle_height(double value) {
  set_has_min_obstacle_height();
  min_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.min_obstacle_height)
}

// required double max_obstacle_height = 4;
inline bool ParaObstacleLayer::has_max_obstacle_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParaObstacleLayer::set_has_max_obstacle_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParaObstacleLayer::clear_has_max_obstacle_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParaObstacleLayer::clear_max_obstacle_height() {
  max_obstacle_height_ = 0;
  clear_has_max_obstacle_height();
}
inline double ParaObstacleLayer::max_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.max_obstacle_height)
  return max_obstacle_height_;
}
inline void ParaObstacleLayer::set_max_obstacle_height(double value) {
  set_has_max_obstacle_height();
  max_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.max_obstacle_height)
}

// required double obstacle_range = 5;
inline bool ParaObstacleLayer::has_obstacle_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParaObstacleLayer::set_has_obstacle_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParaObstacleLayer::clear_has_obstacle_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParaObstacleLayer::clear_obstacle_range() {
  obstacle_range_ = 0;
  clear_has_obstacle_range();
}
inline double ParaObstacleLayer::obstacle_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.obstacle_range)
  return obstacle_range_;
}
inline void ParaObstacleLayer::set_obstacle_range(double value) {
  set_has_obstacle_range();
  obstacle_range_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.obstacle_range)
}

// required double raytrace_range = 6;
inline bool ParaObstacleLayer::has_raytrace_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParaObstacleLayer::set_has_raytrace_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParaObstacleLayer::clear_has_raytrace_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParaObstacleLayer::clear_raytrace_range() {
  raytrace_range_ = 0;
  clear_has_raytrace_range();
}
inline double ParaObstacleLayer::raytrace_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.raytrace_range)
  return raytrace_range_;
}
inline void ParaObstacleLayer::set_raytrace_range(double value) {
  set_has_raytrace_range();
  raytrace_range_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.raytrace_range)
}

// required double transform_tolerance = 7;
inline bool ParaObstacleLayer::has_transform_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParaObstacleLayer::set_has_transform_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParaObstacleLayer::clear_has_transform_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParaObstacleLayer::clear_transform_tolerance() {
  transform_tolerance_ = 0;
  clear_has_transform_tolerance();
}
inline double ParaObstacleLayer::transform_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.transform_tolerance)
  return transform_tolerance_;
}
inline void ParaObstacleLayer::set_transform_tolerance(double value) {
  set_has_transform_tolerance();
  transform_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.transform_tolerance)
}

// required string topic_string = 8;
inline bool ParaObstacleLayer::has_topic_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParaObstacleLayer::set_has_topic_string() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParaObstacleLayer::clear_has_topic_string() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParaObstacleLayer::clear_topic_string() {
  if (topic_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_string_->clear();
  }
  clear_has_topic_string();
}
inline const ::std::string& ParaObstacleLayer::topic_string() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.topic_string)
  return *topic_string_;
}
inline void ParaObstacleLayer::set_topic_string(const ::std::string& value) {
  set_has_topic_string();
  if (topic_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_string_ = new ::std::string;
  }
  topic_string_->assign(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.topic_string)
}
inline void ParaObstacleLayer::set_topic_string(const char* value) {
  set_has_topic_string();
  if (topic_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_string_ = new ::std::string;
  }
  topic_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_costmap.ParaObstacleLayer.topic_string)
}
inline void ParaObstacleLayer::set_topic_string(const char* value, size_t size) {
  set_has_topic_string();
  if (topic_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_string_ = new ::std::string;
  }
  topic_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_costmap.ParaObstacleLayer.topic_string)
}
inline ::std::string* ParaObstacleLayer::mutable_topic_string() {
  set_has_topic_string();
  if (topic_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaObstacleLayer.topic_string)
  return topic_string_;
}
inline ::std::string* ParaObstacleLayer::release_topic_string() {
  clear_has_topic_string();
  if (topic_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_string_;
    topic_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParaObstacleLayer::set_allocated_topic_string(::std::string* topic_string) {
  if (topic_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_string_;
  }
  if (topic_string) {
    set_has_topic_string();
    topic_string_ = topic_string;
  } else {
    clear_has_topic_string();
    topic_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaObstacleLayer.topic_string)
}

// required string sensor_frame = 9;
inline bool ParaObstacleLayer::has_sensor_frame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParaObstacleLayer::set_has_sensor_frame() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParaObstacleLayer::clear_has_sensor_frame() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParaObstacleLayer::clear_sensor_frame() {
  if (sensor_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_frame_->clear();
  }
  clear_has_sensor_frame();
}
inline const ::std::string& ParaObstacleLayer::sensor_frame() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.sensor_frame)
  return *sensor_frame_;
}
inline void ParaObstacleLayer::set_sensor_frame(const ::std::string& value) {
  set_has_sensor_frame();
  if (sensor_frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_frame_ = new ::std::string;
  }
  sensor_frame_->assign(value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.sensor_frame)
}
inline void ParaObstacleLayer::set_sensor_frame(const char* value) {
  set_has_sensor_frame();
  if (sensor_frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_frame_ = new ::std::string;
  }
  sensor_frame_->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_costmap.ParaObstacleLayer.sensor_frame)
}
inline void ParaObstacleLayer::set_sensor_frame(const char* value, size_t size) {
  set_has_sensor_frame();
  if (sensor_frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_frame_ = new ::std::string;
  }
  sensor_frame_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_costmap.ParaObstacleLayer.sensor_frame)
}
inline ::std::string* ParaObstacleLayer::mutable_sensor_frame() {
  set_has_sensor_frame();
  if (sensor_frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sensor_frame_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaObstacleLayer.sensor_frame)
  return sensor_frame_;
}
inline ::std::string* ParaObstacleLayer::release_sensor_frame() {
  clear_has_sensor_frame();
  if (sensor_frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sensor_frame_;
    sensor_frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParaObstacleLayer::set_allocated_sensor_frame(::std::string* sensor_frame) {
  if (sensor_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sensor_frame_;
  }
  if (sensor_frame) {
    set_has_sensor_frame();
    sensor_frame_ = sensor_frame;
  } else {
    clear_has_sensor_frame();
    sensor_frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaObstacleLayer.sensor_frame)
}

// required bool inf_is_valid = 10;
inline bool ParaObstacleLayer::has_inf_is_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParaObstacleLayer::set_has_inf_is_valid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParaObstacleLayer::clear_has_inf_is_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParaObstacleLayer::clear_inf_is_valid() {
  inf_is_valid_ = false;
  clear_has_inf_is_valid();
}
inline bool ParaObstacleLayer::inf_is_valid() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.inf_is_valid)
  return inf_is_valid_;
}
inline void ParaObstacleLayer::set_inf_is_valid(bool value) {
  set_has_inf_is_valid();
  inf_is_valid_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.inf_is_valid)
}

// required bool clearing = 11;
inline bool ParaObstacleLayer::has_clearing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParaObstacleLayer::set_has_clearing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParaObstacleLayer::clear_has_clearing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParaObstacleLayer::clear_clearing() {
  clearing_ = false;
  clear_has_clearing();
}
inline bool ParaObstacleLayer::clearing() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.clearing)
  return clearing_;
}
inline void ParaObstacleLayer::set_clearing(bool value) {
  set_has_clearing();
  clearing_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.clearing)
}

// required bool marking = 12;
inline bool ParaObstacleLayer::has_marking() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParaObstacleLayer::set_has_marking() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParaObstacleLayer::clear_has_marking() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParaObstacleLayer::clear_marking() {
  marking_ = false;
  clear_has_marking();
}
inline bool ParaObstacleLayer::marking() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.marking)
  return marking_;
}
inline void ParaObstacleLayer::set_marking(bool value) {
  set_has_marking();
  marking_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.marking)
}

// required bool footprint_clearing_enabled = 13;
inline bool ParaObstacleLayer::has_footprint_clearing_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParaObstacleLayer::set_has_footprint_clearing_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParaObstacleLayer::clear_has_footprint_clearing_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParaObstacleLayer::clear_footprint_clearing_enabled() {
  footprint_clearing_enabled_ = false;
  clear_has_footprint_clearing_enabled();
}
inline bool ParaObstacleLayer::footprint_clearing_enabled() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.footprint_clearing_enabled)
  return footprint_clearing_enabled_;
}
inline void ParaObstacleLayer::set_footprint_clearing_enabled(bool value) {
  set_has_footprint_clearing_enabled();
  footprint_clearing_enabled_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.footprint_clearing_enabled)
}

// required bool is_debug = 14;
inline bool ParaObstacleLayer::has_is_debug() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParaObstacleLayer::set_has_is_debug() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParaObstacleLayer::clear_has_is_debug() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParaObstacleLayer::clear_is_debug() {
  is_debug_ = false;
  clear_has_is_debug();
}
inline bool ParaObstacleLayer::is_debug() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaObstacleLayer.is_debug)
  return is_debug_;
}
inline void ParaObstacleLayer::set_is_debug(bool value) {
  set_has_is_debug();
  is_debug_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaObstacleLayer.is_debug)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_costmap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_obstacle_5flayer_5fsetting_2eproto__INCLUDED
