// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: costmap_parameter_setting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "costmap_parameter_setting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_costmap {

namespace {

const ::google::protobuf::Descriptor* ParaBasic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaBasic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParaCostmapInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaCostmapInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Footprint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Footprint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParaCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_costmap_5fparameter_5fsetting_2eproto() {
  protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "costmap_parameter_setting.proto");
  GOOGLE_CHECK(file != NULL);
  ParaBasic_descriptor_ = file->message_type(0);
  static const int ParaBasic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaBasic, is_raw_rosmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaBasic, is_debug_),
  };
  ParaBasic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaBasic_descriptor_,
      ParaBasic::default_instance_,
      ParaBasic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaBasic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaBasic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaBasic));
  ParaCostmapInterface_descriptor_ = file->message_type(1);
  static const int ParaCostmapInterface_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, global_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, robot_base_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, footprint_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, transform_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, distance_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_origin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_origin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, is_tracking_unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, is_rolling_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, has_obstacle_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, has_static_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, inflation_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, map_update_frequency_),
  };
  ParaCostmapInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaCostmapInterface_descriptor_,
      ParaCostmapInterface::default_instance_,
      ParaCostmapInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCostmapInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaCostmapInterface));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Footprint_descriptor_ = file->message_type(3);
  static const int Footprint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footprint, point_),
  };
  Footprint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Footprint_descriptor_,
      Footprint::default_instance_,
      Footprint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footprint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footprint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Footprint));
  ParaCollection_descriptor_ = file->message_type(4);
  static const int ParaCollection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCollection, para_costmap_interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCollection, footprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCollection, para_basic_),
  };
  ParaCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaCollection_descriptor_,
      ParaCollection::default_instance_,
      ParaCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_costmap_5fparameter_5fsetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaBasic_descriptor_, &ParaBasic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaCostmapInterface_descriptor_, &ParaCostmapInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Footprint_descriptor_, &Footprint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaCollection_descriptor_, &ParaCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_costmap_5fparameter_5fsetting_2eproto() {
  delete ParaBasic::default_instance_;
  delete ParaBasic_reflection_;
  delete ParaCostmapInterface::default_instance_;
  delete ParaCostmapInterface_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Footprint::default_instance_;
  delete Footprint_reflection_;
  delete ParaCollection::default_instance_;
  delete ParaCollection_reflection_;
}

void protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037costmap_parameter_setting.proto\022\017robor"
    "ts_costmap\"8\n\tParaBasic\022\031\n\021is_raw_rosmes"
    "sage\030\001 \002(\010\022\020\n\010is_debug\030\002 \001(\010\"\256\003\n\024ParaCos"
    "tmapInterface\022\024\n\014global_frame\030\001 \002(\t\022\030\n\020r"
    "obot_base_frame\030\002 \002(\t\022\031\n\021footprint_paddi"
    "ng\030\003 \002(\001\022\033\n\023transform_tolerance\030\004 \002(\001\022\032\n"
    "\022distance_threshold\030\005 \002(\001\022\021\n\tmap_width\030\006"
    " \002(\001\022\022\n\nmap_height\030\007 \002(\001\022\024\n\014map_origin_x"
    "\030\010 \002(\001\022\024\n\014map_origin_y\030\t \002(\001\022\026\n\016map_reso"
    "lution\030\n \002(\001\022\033\n\023is_tracking_unknown\030\013 \002("
    "\010\022\031\n\021is_rolling_window\030\014 \002(\010\022\032\n\022has_obst"
    "acle_layer\030\r \002(\010\022\030\n\020has_static_layer\030\016 \002"
    "(\010\022\033\n\023inflation_file_path\030\017 \002(\t\022\034\n\024map_u"
    "pdate_frequency\030\020 \002(\001\"\035\n\005Point\022\t\n\001x\030\001 \002("
    "\001\022\t\n\001y\030\002 \002(\001\"2\n\tFootprint\022%\n\005point\030\001 \003(\013"
    "2\026.roborts_costmap.Point\"\266\001\n\016ParaCollect"
    "ion\022E\n\026para_costmap_interface\030\001 \002(\0132%.ro"
    "borts_costmap.ParaCostmapInterface\022-\n\tfo"
    "otprint\030\002 \002(\0132\032.roborts_costmap.Footprin"
    "t\022.\n\npara_basic\030\003 \002(\0132\032.roborts_costmap."
    "ParaBasic", 809);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "costmap_parameter_setting.proto", &protobuf_RegisterTypes);
  ParaBasic::default_instance_ = new ParaBasic();
  ParaCostmapInterface::default_instance_ = new ParaCostmapInterface();
  Point::default_instance_ = new Point();
  Footprint::default_instance_ = new Footprint();
  ParaCollection::default_instance_ = new ParaCollection();
  ParaBasic::default_instance_->InitAsDefaultInstance();
  ParaCostmapInterface::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Footprint::default_instance_->InitAsDefaultInstance();
  ParaCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_costmap_5fparameter_5fsetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_costmap_5fparameter_5fsetting_2eproto {
  StaticDescriptorInitializer_costmap_5fparameter_5fsetting_2eproto() {
    protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  }
} static_descriptor_initializer_costmap_5fparameter_5fsetting_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ParaBasic::kIsRawRosmessageFieldNumber;
const int ParaBasic::kIsDebugFieldNumber;
#endif  // !_MSC_VER

ParaBasic::ParaBasic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.ParaBasic)
}

void ParaBasic::InitAsDefaultInstance() {
}

ParaBasic::ParaBasic(const ParaBasic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaBasic)
}

void ParaBasic::SharedCtor() {
  _cached_size_ = 0;
  is_raw_rosmessage_ = false;
  is_debug_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaBasic::~ParaBasic() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaBasic)
  SharedDtor();
}

void ParaBasic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParaBasic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaBasic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaBasic_descriptor_;
}

const ParaBasic& ParaBasic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  return *default_instance_;
}

ParaBasic* ParaBasic::default_instance_ = NULL;

ParaBasic* ParaBasic::New() const {
  return new ParaBasic;
}

void ParaBasic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParaBasic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(is_raw_rosmessage_, is_debug_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaBasic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.ParaBasic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_raw_rosmessage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_raw_rosmessage_)));
          set_has_is_raw_rosmessage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_debug;
        break;
      }

      // optional bool is_debug = 2;
      case 2: {
        if (tag == 16) {
         parse_is_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debug_)));
          set_has_is_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.ParaBasic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.ParaBasic)
  return false;
#undef DO_
}

void ParaBasic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.ParaBasic)
  // required bool is_raw_rosmessage = 1;
  if (has_is_raw_rosmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_raw_rosmessage(), output);
  }

  // optional bool is_debug = 2;
  if (has_is_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.ParaBasic)
}

::google::protobuf::uint8* ParaBasic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaBasic)
  // required bool is_raw_rosmessage = 1;
  if (has_is_raw_rosmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_raw_rosmessage(), target);
  }

  // optional bool is_debug = 2;
  if (has_is_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaBasic)
  return target;
}

int ParaBasic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_raw_rosmessage = 1;
    if (has_is_raw_rosmessage()) {
      total_size += 1 + 1;
    }

    // optional bool is_debug = 2;
    if (has_is_debug()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaBasic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaBasic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaBasic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaBasic::MergeFrom(const ParaBasic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_raw_rosmessage()) {
      set_is_raw_rosmessage(from.is_raw_rosmessage());
    }
    if (from.has_is_debug()) {
      set_is_debug(from.is_debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaBasic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaBasic::CopyFrom(const ParaBasic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaBasic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ParaBasic::Swap(ParaBasic* other) {
  if (other != this) {
    std::swap(is_raw_rosmessage_, other->is_raw_rosmessage_);
    std::swap(is_debug_, other->is_debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaBasic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaBasic_descriptor_;
  metadata.reflection = ParaBasic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParaCostmapInterface::kGlobalFrameFieldNumber;
const int ParaCostmapInterface::kRobotBaseFrameFieldNumber;
const int ParaCostmapInterface::kFootprintPaddingFieldNumber;
const int ParaCostmapInterface::kTransformToleranceFieldNumber;
const int ParaCostmapInterface::kDistanceThresholdFieldNumber;
const int ParaCostmapInterface::kMapWidthFieldNumber;
const int ParaCostmapInterface::kMapHeightFieldNumber;
const int ParaCostmapInterface::kMapOriginXFieldNumber;
const int ParaCostmapInterface::kMapOriginYFieldNumber;
const int ParaCostmapInterface::kMapResolutionFieldNumber;
const int ParaCostmapInterface::kIsTrackingUnknownFieldNumber;
const int ParaCostmapInterface::kIsRollingWindowFieldNumber;
const int ParaCostmapInterface::kHasObstacleLayerFieldNumber;
const int ParaCostmapInterface::kHasStaticLayerFieldNumber;
const int ParaCostmapInterface::kInflationFilePathFieldNumber;
const int ParaCostmapInterface::kMapUpdateFrequencyFieldNumber;
#endif  // !_MSC_VER

ParaCostmapInterface::ParaCostmapInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.ParaCostmapInterface)
}

void ParaCostmapInterface::InitAsDefaultInstance() {
}

ParaCostmapInterface::ParaCostmapInterface(const ParaCostmapInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaCostmapInterface)
}

void ParaCostmapInterface::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  global_frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_base_frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  footprint_padding_ = 0;
  transform_tolerance_ = 0;
  distance_threshold_ = 0;
  map_width_ = 0;
  map_height_ = 0;
  map_origin_x_ = 0;
  map_origin_y_ = 0;
  map_resolution_ = 0;
  is_tracking_unknown_ = false;
  is_rolling_window_ = false;
  has_obstacle_layer_ = false;
  has_static_layer_ = false;
  inflation_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_update_frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaCostmapInterface::~ParaCostmapInterface() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaCostmapInterface)
  SharedDtor();
}

void ParaCostmapInterface::SharedDtor() {
  if (global_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete global_frame_;
  }
  if (robot_base_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robot_base_frame_;
  }
  if (inflation_file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inflation_file_path_;
  }
  if (this != default_instance_) {
  }
}

void ParaCostmapInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaCostmapInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaCostmapInterface_descriptor_;
}

const ParaCostmapInterface& ParaCostmapInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  return *default_instance_;
}

ParaCostmapInterface* ParaCostmapInterface::default_instance_ = NULL;

ParaCostmapInterface* ParaCostmapInterface::New() const {
  return new ParaCostmapInterface;
}

void ParaCostmapInterface::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParaCostmapInterface*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(footprint_padding_, map_origin_x_);
    if (has_global_frame()) {
      if (global_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        global_frame_->clear();
      }
    }
    if (has_robot_base_frame()) {
      if (robot_base_frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        robot_base_frame_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(map_origin_y_, map_resolution_);
    ZR_(map_update_frequency_, has_static_layer_);
    if (has_inflation_file_path()) {
      if (inflation_file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inflation_file_path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaCostmapInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.ParaCostmapInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string global_frame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->global_frame().data(), this->global_frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "global_frame");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robot_base_frame;
        break;
      }

      // required string robot_base_frame = 2;
      case 2: {
        if (tag == 18) {
         parse_robot_base_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_base_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_base_frame().data(), this->robot_base_frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robot_base_frame");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_footprint_padding;
        break;
      }

      // required double footprint_padding = 3;
      case 3: {
        if (tag == 25) {
         parse_footprint_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &footprint_padding_)));
          set_has_footprint_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_transform_tolerance;
        break;
      }

      // required double transform_tolerance = 4;
      case 4: {
        if (tag == 33) {
         parse_transform_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_tolerance_)));
          set_has_transform_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_distance_threshold;
        break;
      }

      // required double distance_threshold = 5;
      case 5: {
        if (tag == 41) {
         parse_distance_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_threshold_)));
          set_has_distance_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_map_width;
        break;
      }

      // required double map_width = 6;
      case 6: {
        if (tag == 49) {
         parse_map_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_width_)));
          set_has_map_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_map_height;
        break;
      }

      // required double map_height = 7;
      case 7: {
        if (tag == 57) {
         parse_map_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_height_)));
          set_has_map_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_map_origin_x;
        break;
      }

      // required double map_origin_x = 8;
      case 8: {
        if (tag == 65) {
         parse_map_origin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_origin_x_)));
          set_has_map_origin_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_map_origin_y;
        break;
      }

      // required double map_origin_y = 9;
      case 9: {
        if (tag == 73) {
         parse_map_origin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_origin_y_)));
          set_has_map_origin_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_map_resolution;
        break;
      }

      // required double map_resolution = 10;
      case 10: {
        if (tag == 81) {
         parse_map_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_resolution_)));
          set_has_map_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_tracking_unknown;
        break;
      }

      // required bool is_tracking_unknown = 11;
      case 11: {
        if (tag == 88) {
         parse_is_tracking_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tracking_unknown_)));
          set_has_is_tracking_unknown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_rolling_window;
        break;
      }

      // required bool is_rolling_window = 12;
      case 12: {
        if (tag == 96) {
         parse_is_rolling_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rolling_window_)));
          set_has_is_rolling_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_has_obstacle_layer;
        break;
      }

      // required bool has_obstacle_layer = 13;
      case 13: {
        if (tag == 104) {
         parse_has_obstacle_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_obstacle_layer_)));
          set_has_has_obstacle_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_has_static_layer;
        break;
      }

      // required bool has_static_layer = 14;
      case 14: {
        if (tag == 112) {
         parse_has_static_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_static_layer_)));
          set_has_has_static_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_inflation_file_path;
        break;
      }

      // required string inflation_file_path = 15;
      case 15: {
        if (tag == 122) {
         parse_inflation_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inflation_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inflation_file_path().data(), this->inflation_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inflation_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_map_update_frequency;
        break;
      }

      // required double map_update_frequency = 16;
      case 16: {
        if (tag == 129) {
         parse_map_update_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_update_frequency_)));
          set_has_map_update_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.ParaCostmapInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.ParaCostmapInterface)
  return false;
#undef DO_
}

void ParaCostmapInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.ParaCostmapInterface)
  // required string global_frame = 1;
  if (has_global_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_frame().data(), this->global_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "global_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->global_frame(), output);
  }

  // required string robot_base_frame = 2;
  if (has_robot_base_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_base_frame().data(), this->robot_base_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_base_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->robot_base_frame(), output);
  }

  // required double footprint_padding = 3;
  if (has_footprint_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->footprint_padding(), output);
  }

  // required double transform_tolerance = 4;
  if (has_transform_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->transform_tolerance(), output);
  }

  // required double distance_threshold = 5;
  if (has_distance_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->distance_threshold(), output);
  }

  // required double map_width = 6;
  if (has_map_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->map_width(), output);
  }

  // required double map_height = 7;
  if (has_map_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->map_height(), output);
  }

  // required double map_origin_x = 8;
  if (has_map_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->map_origin_x(), output);
  }

  // required double map_origin_y = 9;
  if (has_map_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->map_origin_y(), output);
  }

  // required double map_resolution = 10;
  if (has_map_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->map_resolution(), output);
  }

  // required bool is_tracking_unknown = 11;
  if (has_is_tracking_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_tracking_unknown(), output);
  }

  // required bool is_rolling_window = 12;
  if (has_is_rolling_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_rolling_window(), output);
  }

  // required bool has_obstacle_layer = 13;
  if (has_has_obstacle_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->has_obstacle_layer(), output);
  }

  // required bool has_static_layer = 14;
  if (has_has_static_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->has_static_layer(), output);
  }

  // required string inflation_file_path = 15;
  if (has_inflation_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inflation_file_path().data(), this->inflation_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inflation_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->inflation_file_path(), output);
  }

  // required double map_update_frequency = 16;
  if (has_map_update_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->map_update_frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.ParaCostmapInterface)
}

::google::protobuf::uint8* ParaCostmapInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaCostmapInterface)
  // required string global_frame = 1;
  if (has_global_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_frame().data(), this->global_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "global_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->global_frame(), target);
  }

  // required string robot_base_frame = 2;
  if (has_robot_base_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_base_frame().data(), this->robot_base_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_base_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->robot_base_frame(), target);
  }

  // required double footprint_padding = 3;
  if (has_footprint_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->footprint_padding(), target);
  }

  // required double transform_tolerance = 4;
  if (has_transform_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->transform_tolerance(), target);
  }

  // required double distance_threshold = 5;
  if (has_distance_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->distance_threshold(), target);
  }

  // required double map_width = 6;
  if (has_map_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->map_width(), target);
  }

  // required double map_height = 7;
  if (has_map_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->map_height(), target);
  }

  // required double map_origin_x = 8;
  if (has_map_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->map_origin_x(), target);
  }

  // required double map_origin_y = 9;
  if (has_map_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->map_origin_y(), target);
  }

  // required double map_resolution = 10;
  if (has_map_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->map_resolution(), target);
  }

  // required bool is_tracking_unknown = 11;
  if (has_is_tracking_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_tracking_unknown(), target);
  }

  // required bool is_rolling_window = 12;
  if (has_is_rolling_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_rolling_window(), target);
  }

  // required bool has_obstacle_layer = 13;
  if (has_has_obstacle_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->has_obstacle_layer(), target);
  }

  // required bool has_static_layer = 14;
  if (has_has_static_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->has_static_layer(), target);
  }

  // required string inflation_file_path = 15;
  if (has_inflation_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inflation_file_path().data(), this->inflation_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inflation_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->inflation_file_path(), target);
  }

  // required double map_update_frequency = 16;
  if (has_map_update_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->map_update_frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaCostmapInterface)
  return target;
}

int ParaCostmapInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string global_frame = 1;
    if (has_global_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_frame());
    }

    // required string robot_base_frame = 2;
    if (has_robot_base_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_base_frame());
    }

    // required double footprint_padding = 3;
    if (has_footprint_padding()) {
      total_size += 1 + 8;
    }

    // required double transform_tolerance = 4;
    if (has_transform_tolerance()) {
      total_size += 1 + 8;
    }

    // required double distance_threshold = 5;
    if (has_distance_threshold()) {
      total_size += 1 + 8;
    }

    // required double map_width = 6;
    if (has_map_width()) {
      total_size += 1 + 8;
    }

    // required double map_height = 7;
    if (has_map_height()) {
      total_size += 1 + 8;
    }

    // required double map_origin_x = 8;
    if (has_map_origin_x()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double map_origin_y = 9;
    if (has_map_origin_y()) {
      total_size += 1 + 8;
    }

    // required double map_resolution = 10;
    if (has_map_resolution()) {
      total_size += 1 + 8;
    }

    // required bool is_tracking_unknown = 11;
    if (has_is_tracking_unknown()) {
      total_size += 1 + 1;
    }

    // required bool is_rolling_window = 12;
    if (has_is_rolling_window()) {
      total_size += 1 + 1;
    }

    // required bool has_obstacle_layer = 13;
    if (has_has_obstacle_layer()) {
      total_size += 1 + 1;
    }

    // required bool has_static_layer = 14;
    if (has_has_static_layer()) {
      total_size += 1 + 1;
    }

    // required string inflation_file_path = 15;
    if (has_inflation_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inflation_file_path());
    }

    // required double map_update_frequency = 16;
    if (has_map_update_frequency()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaCostmapInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaCostmapInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaCostmapInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaCostmapInterface::MergeFrom(const ParaCostmapInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_global_frame()) {
      set_global_frame(from.global_frame());
    }
    if (from.has_robot_base_frame()) {
      set_robot_base_frame(from.robot_base_frame());
    }
    if (from.has_footprint_padding()) {
      set_footprint_padding(from.footprint_padding());
    }
    if (from.has_transform_tolerance()) {
      set_transform_tolerance(from.transform_tolerance());
    }
    if (from.has_distance_threshold()) {
      set_distance_threshold(from.distance_threshold());
    }
    if (from.has_map_width()) {
      set_map_width(from.map_width());
    }
    if (from.has_map_height()) {
      set_map_height(from.map_height());
    }
    if (from.has_map_origin_x()) {
      set_map_origin_x(from.map_origin_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map_origin_y()) {
      set_map_origin_y(from.map_origin_y());
    }
    if (from.has_map_resolution()) {
      set_map_resolution(from.map_resolution());
    }
    if (from.has_is_tracking_unknown()) {
      set_is_tracking_unknown(from.is_tracking_unknown());
    }
    if (from.has_is_rolling_window()) {
      set_is_rolling_window(from.is_rolling_window());
    }
    if (from.has_has_obstacle_layer()) {
      set_has_obstacle_layer(from.has_obstacle_layer());
    }
    if (from.has_has_static_layer()) {
      set_has_static_layer(from.has_static_layer());
    }
    if (from.has_inflation_file_path()) {
      set_inflation_file_path(from.inflation_file_path());
    }
    if (from.has_map_update_frequency()) {
      set_map_update_frequency(from.map_update_frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaCostmapInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaCostmapInterface::CopyFrom(const ParaCostmapInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCostmapInterface::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void ParaCostmapInterface::Swap(ParaCostmapInterface* other) {
  if (other != this) {
    std::swap(global_frame_, other->global_frame_);
    std::swap(robot_base_frame_, other->robot_base_frame_);
    std::swap(footprint_padding_, other->footprint_padding_);
    std::swap(transform_tolerance_, other->transform_tolerance_);
    std::swap(distance_threshold_, other->distance_threshold_);
    std::swap(map_width_, other->map_width_);
    std::swap(map_height_, other->map_height_);
    std::swap(map_origin_x_, other->map_origin_x_);
    std::swap(map_origin_y_, other->map_origin_y_);
    std::swap(map_resolution_, other->map_resolution_);
    std::swap(is_tracking_unknown_, other->is_tracking_unknown_);
    std::swap(is_rolling_window_, other->is_rolling_window_);
    std::swap(has_obstacle_layer_, other->has_obstacle_layer_);
    std::swap(has_static_layer_, other->has_static_layer_);
    std::swap(inflation_file_path_, other->inflation_file_path_);
    std::swap(map_update_frequency_, other->map_update_frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaCostmapInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaCostmapInterface_descriptor_;
  metadata.reflection = ParaCostmapInterface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_costmap.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.Point)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.Point)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Footprint::kPointFieldNumber;
#endif  // !_MSC_VER

Footprint::Footprint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.Footprint)
}

void Footprint::InitAsDefaultInstance() {
}

Footprint::Footprint(const Footprint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.Footprint)
}

void Footprint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Footprint::~Footprint() {
  // @@protoc_insertion_point(destructor:roborts_costmap.Footprint)
  SharedDtor();
}

void Footprint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Footprint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Footprint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Footprint_descriptor_;
}

const Footprint& Footprint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  return *default_instance_;
}

Footprint* Footprint::default_instance_ = NULL;

Footprint* Footprint::New() const {
  return new Footprint;
}

void Footprint::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Footprint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.Footprint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_costmap.Point point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.Footprint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.Footprint)
  return false;
#undef DO_
}

void Footprint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.Footprint)
  // repeated .roborts_costmap.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.Footprint)
}

::google::protobuf::uint8* Footprint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.Footprint)
  // repeated .roborts_costmap.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.Footprint)
  return target;
}

int Footprint::ByteSize() const {
  int total_size = 0;

  // repeated .roborts_costmap.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Footprint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Footprint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Footprint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Footprint::MergeFrom(const Footprint& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Footprint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footprint::CopyFrom(const Footprint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footprint::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Footprint::Swap(Footprint* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Footprint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Footprint_descriptor_;
  metadata.reflection = Footprint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParaCollection::kParaCostmapInterfaceFieldNumber;
const int ParaCollection::kFootprintFieldNumber;
const int ParaCollection::kParaBasicFieldNumber;
#endif  // !_MSC_VER

ParaCollection::ParaCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.ParaCollection)
}

void ParaCollection::InitAsDefaultInstance() {
  para_costmap_interface_ = const_cast< ::roborts_costmap::ParaCostmapInterface*>(&::roborts_costmap::ParaCostmapInterface::default_instance());
  footprint_ = const_cast< ::roborts_costmap::Footprint*>(&::roborts_costmap::Footprint::default_instance());
  para_basic_ = const_cast< ::roborts_costmap::ParaBasic*>(&::roborts_costmap::ParaBasic::default_instance());
}

ParaCollection::ParaCollection(const ParaCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaCollection)
}

void ParaCollection::SharedCtor() {
  _cached_size_ = 0;
  para_costmap_interface_ = NULL;
  footprint_ = NULL;
  para_basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaCollection::~ParaCollection() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaCollection)
  SharedDtor();
}

void ParaCollection::SharedDtor() {
  if (this != default_instance_) {
    delete para_costmap_interface_;
    delete footprint_;
    delete para_basic_;
  }
}

void ParaCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaCollection_descriptor_;
}

const ParaCollection& ParaCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_costmap_5fparameter_5fsetting_2eproto();
  return *default_instance_;
}

ParaCollection* ParaCollection::default_instance_ = NULL;

ParaCollection* ParaCollection::New() const {
  return new ParaCollection;
}

void ParaCollection::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_para_costmap_interface()) {
      if (para_costmap_interface_ != NULL) para_costmap_interface_->::roborts_costmap::ParaCostmapInterface::Clear();
    }
    if (has_footprint()) {
      if (footprint_ != NULL) footprint_->::roborts_costmap::Footprint::Clear();
    }
    if (has_para_basic()) {
      if (para_basic_ != NULL) para_basic_->::roborts_costmap::ParaBasic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.ParaCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_para_costmap_interface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_footprint;
        break;
      }

      // required .roborts_costmap.Footprint footprint = 2;
      case 2: {
        if (tag == 18) {
         parse_footprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_para_basic;
        break;
      }

      // required .roborts_costmap.ParaBasic para_basic = 3;
      case 3: {
        if (tag == 26) {
         parse_para_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_para_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.ParaCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.ParaCollection)
  return false;
#undef DO_
}

void ParaCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.ParaCollection)
  // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
  if (has_para_costmap_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->para_costmap_interface(), output);
  }

  // required .roborts_costmap.Footprint footprint = 2;
  if (has_footprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->footprint(), output);
  }

  // required .roborts_costmap.ParaBasic para_basic = 3;
  if (has_para_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->para_basic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.ParaCollection)
}

::google::protobuf::uint8* ParaCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaCollection)
  // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
  if (has_para_costmap_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->para_costmap_interface(), target);
  }

  // required .roborts_costmap.Footprint footprint = 2;
  if (has_footprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->footprint(), target);
  }

  // required .roborts_costmap.ParaBasic para_basic = 3;
  if (has_para_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->para_basic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaCollection)
  return target;
}

int ParaCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .roborts_costmap.ParaCostmapInterface para_costmap_interface = 1;
    if (has_para_costmap_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->para_costmap_interface());
    }

    // required .roborts_costmap.Footprint footprint = 2;
    if (has_footprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footprint());
    }

    // required .roborts_costmap.ParaBasic para_basic = 3;
    if (has_para_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->para_basic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaCollection::MergeFrom(const ParaCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para_costmap_interface()) {
      mutable_para_costmap_interface()->::roborts_costmap::ParaCostmapInterface::MergeFrom(from.para_costmap_interface());
    }
    if (from.has_footprint()) {
      mutable_footprint()->::roborts_costmap::Footprint::MergeFrom(from.footprint());
    }
    if (from.has_para_basic()) {
      mutable_para_basic()->::roborts_costmap::ParaBasic::MergeFrom(from.para_basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaCollection::CopyFrom(const ParaCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_para_costmap_interface()) {
    if (!this->para_costmap_interface().IsInitialized()) return false;
  }
  if (has_footprint()) {
    if (!this->footprint().IsInitialized()) return false;
  }
  if (has_para_basic()) {
    if (!this->para_basic().IsInitialized()) return false;
  }
  return true;
}

void ParaCollection::Swap(ParaCollection* other) {
  if (other != this) {
    std::swap(para_costmap_interface_, other->para_costmap_interface_);
    std::swap(footprint_, other->footprint_);
    std::swap(para_basic_, other->para_basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaCollection_descriptor_;
  metadata.reflection = ParaCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_costmap

// @@protoc_insertion_point(global_scope)
