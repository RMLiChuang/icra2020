// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a_star_planner_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "a_star_planner_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_global_planner {

namespace {

const ::google::protobuf::Descriptor* AStarPlannerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AStarPlannerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_a_5fstar_5fplanner_5fconfig_2eproto() {
  protobuf_AddDesc_a_5fstar_5fplanner_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "a_star_planner_config.proto");
  GOOGLE_CHECK(file != NULL);
  AStarPlannerConfig_descriptor_ = file->message_type(0);
  static const int AStarPlannerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AStarPlannerConfig, inaccessible_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AStarPlannerConfig, heuristic_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AStarPlannerConfig, goal_search_tolerance_),
  };
  AStarPlannerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AStarPlannerConfig_descriptor_,
      AStarPlannerConfig::default_instance_,
      AStarPlannerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AStarPlannerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AStarPlannerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AStarPlannerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_a_5fstar_5fplanner_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AStarPlannerConfig_descriptor_, &AStarPlannerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_a_5fstar_5fplanner_5fconfig_2eproto() {
  delete AStarPlannerConfig::default_instance_;
  delete AStarPlannerConfig_reflection_;
}

void protobuf_AddDesc_a_5fstar_5fplanner_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033a_star_planner_config.proto\022\026roborts_g"
    "lobal_planner\"v\n\022AStarPlannerConfig\022\036\n\021i"
    "naccessible_cost\030\001 \001(\r:\003253\022\033\n\020heuristic"
    "_factor\030\002 \001(\002:\0011\022#\n\025goal_search_toleranc"
    "e\030\003 \001(\002:\0040.25", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "a_star_planner_config.proto", &protobuf_RegisterTypes);
  AStarPlannerConfig::default_instance_ = new AStarPlannerConfig();
  AStarPlannerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_a_5fstar_5fplanner_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_a_5fstar_5fplanner_5fconfig_2eproto {
  StaticDescriptorInitializer_a_5fstar_5fplanner_5fconfig_2eproto() {
    protobuf_AddDesc_a_5fstar_5fplanner_5fconfig_2eproto();
  }
} static_descriptor_initializer_a_5fstar_5fplanner_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AStarPlannerConfig::kInaccessibleCostFieldNumber;
const int AStarPlannerConfig::kHeuristicFactorFieldNumber;
const int AStarPlannerConfig::kGoalSearchToleranceFieldNumber;
#endif  // !_MSC_VER

AStarPlannerConfig::AStarPlannerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_global_planner.AStarPlannerConfig)
}

void AStarPlannerConfig::InitAsDefaultInstance() {
}

AStarPlannerConfig::AStarPlannerConfig(const AStarPlannerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_global_planner.AStarPlannerConfig)
}

void AStarPlannerConfig::SharedCtor() {
  _cached_size_ = 0;
  inaccessible_cost_ = 253u;
  heuristic_factor_ = 1;
  goal_search_tolerance_ = 0.25f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AStarPlannerConfig::~AStarPlannerConfig() {
  // @@protoc_insertion_point(destructor:roborts_global_planner.AStarPlannerConfig)
  SharedDtor();
}

void AStarPlannerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AStarPlannerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AStarPlannerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AStarPlannerConfig_descriptor_;
}

const AStarPlannerConfig& AStarPlannerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_a_5fstar_5fplanner_5fconfig_2eproto();
  return *default_instance_;
}

AStarPlannerConfig* AStarPlannerConfig::default_instance_ = NULL;

AStarPlannerConfig* AStarPlannerConfig::New() const {
  return new AStarPlannerConfig;
}

void AStarPlannerConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    inaccessible_cost_ = 253u;
    heuristic_factor_ = 1;
    goal_search_tolerance_ = 0.25f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AStarPlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_global_planner.AStarPlannerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inaccessible_cost = 1 [default = 253];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inaccessible_cost_)));
          set_has_inaccessible_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_heuristic_factor;
        break;
      }

      // optional float heuristic_factor = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_heuristic_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heuristic_factor_)));
          set_has_heuristic_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_goal_search_tolerance;
        break;
      }

      // optional float goal_search_tolerance = 3 [default = 0.25];
      case 3: {
        if (tag == 29) {
         parse_goal_search_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_search_tolerance_)));
          set_has_goal_search_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_global_planner.AStarPlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_global_planner.AStarPlannerConfig)
  return false;
#undef DO_
}

void AStarPlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_global_planner.AStarPlannerConfig)
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (has_inaccessible_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inaccessible_cost(), output);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (has_heuristic_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heuristic_factor(), output);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (has_goal_search_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->goal_search_tolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_global_planner.AStarPlannerConfig)
}

::google::protobuf::uint8* AStarPlannerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_global_planner.AStarPlannerConfig)
  // optional uint32 inaccessible_cost = 1 [default = 253];
  if (has_inaccessible_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inaccessible_cost(), target);
  }

  // optional float heuristic_factor = 2 [default = 1];
  if (has_heuristic_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heuristic_factor(), target);
  }

  // optional float goal_search_tolerance = 3 [default = 0.25];
  if (has_goal_search_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->goal_search_tolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_global_planner.AStarPlannerConfig)
  return target;
}

int AStarPlannerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 inaccessible_cost = 1 [default = 253];
    if (has_inaccessible_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inaccessible_cost());
    }

    // optional float heuristic_factor = 2 [default = 1];
    if (has_heuristic_factor()) {
      total_size += 1 + 4;
    }

    // optional float goal_search_tolerance = 3 [default = 0.25];
    if (has_goal_search_tolerance()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AStarPlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AStarPlannerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AStarPlannerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AStarPlannerConfig::MergeFrom(const AStarPlannerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inaccessible_cost()) {
      set_inaccessible_cost(from.inaccessible_cost());
    }
    if (from.has_heuristic_factor()) {
      set_heuristic_factor(from.heuristic_factor());
    }
    if (from.has_goal_search_tolerance()) {
      set_goal_search_tolerance(from.goal_search_tolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AStarPlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AStarPlannerConfig::CopyFrom(const AStarPlannerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AStarPlannerConfig::IsInitialized() const {

  return true;
}

void AStarPlannerConfig::Swap(AStarPlannerConfig* other) {
  if (other != this) {
    std::swap(inaccessible_cost_, other->inaccessible_cost_);
    std::swap(heuristic_factor_, other->heuristic_factor_);
    std::swap(goal_search_tolerance_, other->goal_search_tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AStarPlannerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AStarPlannerConfig_descriptor_;
  metadata.reflection = AStarPlannerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_global_planner

// @@protoc_insertion_point(global_scope)
