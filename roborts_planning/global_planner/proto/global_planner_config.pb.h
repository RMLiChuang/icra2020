// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_planner_config.proto

#ifndef PROTOBUF_global_5fplanner_5fconfig_2eproto__INCLUDED
#define PROTOBUF_global_5fplanner_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_global_planner {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_global_5fplanner_5fconfig_2eproto();
void protobuf_AssignDesc_global_5fplanner_5fconfig_2eproto();
void protobuf_ShutdownFile_global_5fplanner_5fconfig_2eproto();

class GlobalPlannerConfig;

// ===================================================================

class GlobalPlannerConfig : public ::google::protobuf::Message {
 public:
  GlobalPlannerConfig();
  virtual ~GlobalPlannerConfig();

  GlobalPlannerConfig(const GlobalPlannerConfig& from);

  inline GlobalPlannerConfig& operator=(const GlobalPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPlannerConfig& default_instance();

  void Swap(GlobalPlannerConfig* other);

  // implements Message ----------------------------------------------

  GlobalPlannerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalPlannerConfig& from);
  void MergeFrom(const GlobalPlannerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // optional string selected_algorithm = 2;
  inline bool has_selected_algorithm() const;
  inline void clear_selected_algorithm();
  static const int kSelectedAlgorithmFieldNumber = 2;
  inline const ::std::string& selected_algorithm() const;
  inline void set_selected_algorithm(const ::std::string& value);
  inline void set_selected_algorithm(const char* value);
  inline void set_selected_algorithm(const char* value, size_t size);
  inline ::std::string* mutable_selected_algorithm();
  inline ::std::string* release_selected_algorithm();
  inline void set_allocated_selected_algorithm(::std::string* selected_algorithm);

  // required int32 frequency = 3;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  inline ::google::protobuf::int32 frequency() const;
  inline void set_frequency(::google::protobuf::int32 value);

  // required int32 max_retries = 4;
  inline bool has_max_retries() const;
  inline void clear_max_retries();
  static const int kMaxRetriesFieldNumber = 4;
  inline ::google::protobuf::int32 max_retries() const;
  inline void set_max_retries(::google::protobuf::int32 value);

  // required double goal_distance_tolerance = 5;
  inline bool has_goal_distance_tolerance() const;
  inline void clear_goal_distance_tolerance();
  static const int kGoalDistanceToleranceFieldNumber = 5;
  inline double goal_distance_tolerance() const;
  inline void set_goal_distance_tolerance(double value);

  // required double goal_angle_tolerance = 6;
  inline bool has_goal_angle_tolerance() const;
  inline void clear_goal_angle_tolerance();
  static const int kGoalAngleToleranceFieldNumber = 6;
  inline double goal_angle_tolerance() const;
  inline void set_goal_angle_tolerance(double value);

  // @@protoc_insertion_point(class_scope:roborts_global_planner.GlobalPlannerConfig)
 private:
  inline void set_has_selected_algorithm();
  inline void clear_has_selected_algorithm();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_max_retries();
  inline void clear_has_max_retries();
  inline void set_has_goal_distance_tolerance();
  inline void clear_has_goal_distance_tolerance();
  inline void set_has_goal_angle_tolerance();
  inline void clear_has_goal_angle_tolerance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::std::string* selected_algorithm_;
  ::google::protobuf::int32 frequency_;
  ::google::protobuf::int32 max_retries_;
  double goal_distance_tolerance_;
  double goal_angle_tolerance_;
  friend void  protobuf_AddDesc_global_5fplanner_5fconfig_2eproto();
  friend void protobuf_AssignDesc_global_5fplanner_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_global_5fplanner_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static GlobalPlannerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// GlobalPlannerConfig

// repeated string name = 1;
inline int GlobalPlannerConfig::name_size() const {
  return name_.size();
}
inline void GlobalPlannerConfig::clear_name() {
  name_.Clear();
}
inline const ::std::string& GlobalPlannerConfig::name(int index) const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.name)
  return name_.Get(index);
}
inline ::std::string* GlobalPlannerConfig::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_global_planner.GlobalPlannerConfig.name)
  return name_.Mutable(index);
}
inline void GlobalPlannerConfig::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(value);
}
inline void GlobalPlannerConfig::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_global_planner.GlobalPlannerConfig.name)
}
inline ::std::string* GlobalPlannerConfig::add_name() {
  return name_.Add();
}
inline void GlobalPlannerConfig::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roborts_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roborts_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roborts_global_planner.GlobalPlannerConfig.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GlobalPlannerConfig::name() const {
  // @@protoc_insertion_point(field_list:roborts_global_planner.GlobalPlannerConfig.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GlobalPlannerConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:roborts_global_planner.GlobalPlannerConfig.name)
  return &name_;
}

// optional string selected_algorithm = 2;
inline bool GlobalPlannerConfig::has_selected_algorithm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalPlannerConfig::set_has_selected_algorithm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalPlannerConfig::clear_has_selected_algorithm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalPlannerConfig::clear_selected_algorithm() {
  if (selected_algorithm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selected_algorithm_->clear();
  }
  clear_has_selected_algorithm();
}
inline const ::std::string& GlobalPlannerConfig::selected_algorithm() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
  return *selected_algorithm_;
}
inline void GlobalPlannerConfig::set_selected_algorithm(const ::std::string& value) {
  set_has_selected_algorithm();
  if (selected_algorithm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selected_algorithm_ = new ::std::string;
  }
  selected_algorithm_->assign(value);
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline void GlobalPlannerConfig::set_selected_algorithm(const char* value) {
  set_has_selected_algorithm();
  if (selected_algorithm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selected_algorithm_ = new ::std::string;
  }
  selected_algorithm_->assign(value);
  // @@protoc_insertion_point(field_set_char:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline void GlobalPlannerConfig::set_selected_algorithm(const char* value, size_t size) {
  set_has_selected_algorithm();
  if (selected_algorithm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selected_algorithm_ = new ::std::string;
  }
  selected_algorithm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline ::std::string* GlobalPlannerConfig::mutable_selected_algorithm() {
  set_has_selected_algorithm();
  if (selected_algorithm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selected_algorithm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
  return selected_algorithm_;
}
inline ::std::string* GlobalPlannerConfig::release_selected_algorithm() {
  clear_has_selected_algorithm();
  if (selected_algorithm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = selected_algorithm_;
    selected_algorithm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GlobalPlannerConfig::set_allocated_selected_algorithm(::std::string* selected_algorithm) {
  if (selected_algorithm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selected_algorithm_;
  }
  if (selected_algorithm) {
    set_has_selected_algorithm();
    selected_algorithm_ = selected_algorithm;
  } else {
    clear_has_selected_algorithm();
    selected_algorithm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_global_planner.GlobalPlannerConfig.selected_algorithm)
}

// required int32 frequency = 3;
inline bool GlobalPlannerConfig::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalPlannerConfig::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalPlannerConfig::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalPlannerConfig::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
inline ::google::protobuf::int32 GlobalPlannerConfig::frequency() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.frequency)
  return frequency_;
}
inline void GlobalPlannerConfig::set_frequency(::google::protobuf::int32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.frequency)
}

// required int32 max_retries = 4;
inline bool GlobalPlannerConfig::has_max_retries() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalPlannerConfig::set_has_max_retries() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalPlannerConfig::clear_has_max_retries() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalPlannerConfig::clear_max_retries() {
  max_retries_ = 0;
  clear_has_max_retries();
}
inline ::google::protobuf::int32 GlobalPlannerConfig::max_retries() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.max_retries)
  return max_retries_;
}
inline void GlobalPlannerConfig::set_max_retries(::google::protobuf::int32 value) {
  set_has_max_retries();
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.max_retries)
}

// required double goal_distance_tolerance = 5;
inline bool GlobalPlannerConfig::has_goal_distance_tolerance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GlobalPlannerConfig::set_has_goal_distance_tolerance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GlobalPlannerConfig::clear_has_goal_distance_tolerance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GlobalPlannerConfig::clear_goal_distance_tolerance() {
  goal_distance_tolerance_ = 0;
  clear_has_goal_distance_tolerance();
}
inline double GlobalPlannerConfig::goal_distance_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
  return goal_distance_tolerance_;
}
inline void GlobalPlannerConfig::set_goal_distance_tolerance(double value) {
  set_has_goal_distance_tolerance();
  goal_distance_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
}

// required double goal_angle_tolerance = 6;
inline bool GlobalPlannerConfig::has_goal_angle_tolerance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GlobalPlannerConfig::set_has_goal_angle_tolerance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GlobalPlannerConfig::clear_has_goal_angle_tolerance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GlobalPlannerConfig::clear_goal_angle_tolerance() {
  goal_angle_tolerance_ = 0;
  clear_has_goal_angle_tolerance();
}
inline double GlobalPlannerConfig::goal_angle_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
  return goal_angle_tolerance_;
}
inline void GlobalPlannerConfig::set_goal_angle_tolerance(double value) {
  set_has_goal_angle_tolerance();
  goal_angle_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_global_planner

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_global_5fplanner_5fconfig_2eproto__INCLUDED
