// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscapeConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscapeConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhirlVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhirlVel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yaw_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  EscapeConstraint_descriptor_ = file->message_type(1);
  static const int EscapeConstraint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, robot_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_max_x_),
  };
  EscapeConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscapeConstraint_descriptor_,
      EscapeConstraint::default_instance_,
      EscapeConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscapeConstraint));
  SearchConstraint_descriptor_ = file->message_type(2);
  static const int SearchConstraint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, y_limit_),
  };
  SearchConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConstraint_descriptor_,
      SearchConstraint::default_instance_,
      SearchConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConstraint));
  WhirlVel_descriptor_ = file->message_type(3);
  static const int WhirlVel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_z_vel_),
  };
  WhirlVel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhirlVel_descriptor_,
      WhirlVel::default_instance_,
      WhirlVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhirlVel));
  MultiRobot_descriptor_ = file->message_type(4);
  static const int MultiRobot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, start_position_),
  };
  MultiRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRobot_descriptor_,
      MultiRobot::default_instance_,
      MultiRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRobot));
  DecisionConfig_descriptor_ = file->message_type(5);
  static const int DecisionConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, simulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, buff_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, whirl_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_task_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_4_),
  };
  DecisionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecisionConfig_descriptor_,
      DecisionConfig::default_instance_,
      DecisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecisionConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscapeConstraint_descriptor_, &EscapeConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConstraint_descriptor_, &SearchConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhirlVel_descriptor_, &WhirlVel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRobot_descriptor_, &MultiRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecisionConfig_descriptor_, &DecisionConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete EscapeConstraint::default_instance_;
  delete EscapeConstraint_reflection_;
  delete SearchConstraint::default_instance_;
  delete SearchConstraint_reflection_;
  delete WhirlVel::default_instance_;
  delete WhirlVel_reflection_;
  delete MultiRobot::default_instance_;
  delete MultiRobot_reflection_;
  delete DecisionConfig::default_instance_;
  delete DecisionConfig_reflection_;
}

void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\022\020roborts_decision\"R\n\005Po"
    "int\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004"
    "roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304"
    "\001\n\020EscapeConstraint\022\024\n\014left_x_limit\030\001 \001("
    "\002\022\025\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limi"
    "t\030\003 \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021le"
    "ft_random_max_x\030\005 \001(\002\022\032\n\022right_random_mi"
    "n_x\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n"
    "\020SearchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_"
    "limit\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001"
    " \001(\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel"
    "\030\003 \001(\002\"=\n\nMultiRobot\022/\n\016start_position\030\007"
    " \001(\0132\027.roborts_decision.Point\"\222\005\n\016Decisi"
    "onConfig\022&\n\005point\030\001 \003(\0132\027.roborts_decisi"
    "on.Point\022\027\n\010simulate\030\002 \001(\010:\005false\022\025\n\006mas"
    "ter\030\003 \001(\010:\005false\0222\n\006escape\030\004 \001(\0132\".robor"
    "ts_decision.EscapeConstraint\022+\n\nbuff_poi"
    "nt\030\005 \003(\0132\027.roborts_decision.Point\0228\n\014sea"
    "rch_limit\030\006 \001(\0132\".roborts_decision.Searc"
    "hConstraint\022-\n\twhirl_vel\030\007 \001(\0132\032.roborts"
    "_decision.WhirlVel\022.\n\010wing_bot\030\010 \001(\0132\034.r"
    "oborts_decision.MultiRobot\0220\n\nmaster_bot"
    "\030\t \001(\0132\034.roborts_decision.MultiRobot\0224\n\023"
    "wing_bot_task_point\030\n \001(\0132\027.roborts_deci"
    "sion.Point\0220\n\017search_region_1\030\013 \003(\0132\027.ro"
    "borts_decision.Point\0220\n\017search_region_2\030"
    "\014 \003(\0132\027.roborts_decision.Point\0220\n\017search"
    "_region_3\030\r \003(\0132\027.roborts_decision.Point"
    "\0220\n\017search_region_4\030\016 \003(\0132\027.roborts_deci"
    "sion.Point", 1170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  EscapeConstraint::default_instance_ = new EscapeConstraint();
  SearchConstraint::default_instance_ = new SearchConstraint();
  WhirlVel::default_instance_ = new WhirlVel();
  MultiRobot::default_instance_ = new MultiRobot();
  DecisionConfig::default_instance_ = new DecisionConfig();
  Point::default_instance_->InitAsDefaultInstance();
  EscapeConstraint::default_instance_->InitAsDefaultInstance();
  SearchConstraint::default_instance_->InitAsDefaultInstance();
  WhirlVel::default_instance_->InitAsDefaultInstance();
  MultiRobot::default_instance_->InitAsDefaultInstance();
  DecisionConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_decision.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, yaw_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roll;
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (tag == 37) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // optional float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float roll = 4;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float roll = 4;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !_MSC_VER

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::InitAsDefaultInstance() {
}

EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  _cached_size_ = 0;
  left_x_limit_ = 0;
  right_x_limit_ = 0;
  robot_x_limit_ = 0;
  left_random_min_x_ = 0;
  left_random_max_x_ = 0;
  right_random_min_x_ = 0;
  right_random_max_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscapeConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscapeConstraint_descriptor_;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

EscapeConstraint* EscapeConstraint::default_instance_ = NULL;

EscapeConstraint* EscapeConstraint::New() const {
  return new EscapeConstraint;
}

void EscapeConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EscapeConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(left_x_limit_, right_random_max_x_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.EscapeConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
          set_has_left_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_x_limit;
        break;
      }

      // optional float right_x_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_right_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
          set_has_right_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_x_limit;
        break;
      }

      // optional float robot_x_limit = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
          set_has_robot_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_left_random_min_x;
        break;
      }

      // optional float left_random_min_x = 4;
      case 4: {
        if (tag == 37) {
         parse_left_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
          set_has_left_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_left_random_max_x;
        break;
      }

      // optional float left_random_max_x = 5;
      case 5: {
        if (tag == 45) {
         parse_left_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
          set_has_left_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_right_random_min_x;
        break;
      }

      // optional float right_random_min_x = 6;
      case 6: {
        if (tag == 53) {
         parse_right_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
          set_has_right_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_right_random_max_x;
        break;
      }

      // optional float right_random_max_x = 7;
      case 7: {
        if (tag == 61) {
         parse_right_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
          set_has_right_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.EscapeConstraint)
  return target;
}

int EscapeConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float left_x_limit = 1;
    if (has_left_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (has_right_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (has_robot_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (has_left_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (has_left_random_max_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (has_right_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (has_right_random_max_x()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscapeConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscapeConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x_limit()) {
      set_left_x_limit(from.left_x_limit());
    }
    if (from.has_right_x_limit()) {
      set_right_x_limit(from.right_x_limit());
    }
    if (from.has_robot_x_limit()) {
      set_robot_x_limit(from.robot_x_limit());
    }
    if (from.has_left_random_min_x()) {
      set_left_random_min_x(from.left_random_min_x());
    }
    if (from.has_left_random_max_x()) {
      set_left_random_max_x(from.left_random_max_x());
    }
    if (from.has_right_random_min_x()) {
      set_right_random_min_x(from.right_random_min_x());
    }
    if (from.has_right_random_max_x()) {
      set_right_random_max_x(from.right_random_max_x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {

  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other != this) {
    std::swap(left_x_limit_, other->left_x_limit_);
    std::swap(right_x_limit_, other->right_x_limit_);
    std::swap(robot_x_limit_, other->robot_x_limit_);
    std::swap(left_random_min_x_, other->left_random_min_x_);
    std::swap(left_random_max_x_, other->left_random_max_x_);
    std::swap(right_random_min_x_, other->right_random_min_x_);
    std::swap(right_random_max_x_, other->right_random_max_x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscapeConstraint_descriptor_;
  metadata.reflection = EscapeConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !_MSC_VER

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::InitAsDefaultInstance() {
}

SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  _cached_size_ = 0;
  x_limit_ = 0;
  y_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConstraint_descriptor_;
}

const SearchConstraint& SearchConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

SearchConstraint* SearchConstraint::default_instance_ = NULL;

SearchConstraint* SearchConstraint::New() const {
  return new SearchConstraint;
}

void SearchConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_limit_, y_limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.SearchConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
          set_has_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_limit;
        break;
      }

      // optional float y_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_y_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
          set_has_y_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.SearchConstraint)
  return target;
}

int SearchConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_limit = 1;
    if (has_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (has_y_limit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_limit()) {
      set_x_limit(from.x_limit());
    }
    if (from.has_y_limit()) {
      set_y_limit(from.y_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {

  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other != this) {
    std::swap(x_limit_, other->x_limit_);
    std::swap(y_limit_, other->y_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConstraint_descriptor_;
  metadata.reflection = SearchConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !_MSC_VER

WhirlVel::WhirlVel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.WhirlVel)
}

void WhirlVel::InitAsDefaultInstance() {
}

WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  _cached_size_ = 0;
  angle_x_vel_ = 0;
  angle_y_vel_ = 0;
  angle_z_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:roborts_decision.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhirlVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhirlVel_descriptor_;
}

const WhirlVel& WhirlVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

WhirlVel* WhirlVel::default_instance_ = NULL;

WhirlVel* WhirlVel::New() const {
  return new WhirlVel;
}

void WhirlVel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WhirlVel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(angle_x_vel_, angle_z_vel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.WhirlVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_x_vel = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
          set_has_angle_x_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle_y_vel;
        break;
      }

      // optional float angle_y_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_angle_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
          set_has_angle_y_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_z_vel;
        break;
      }

      // optional float angle_z_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_z_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
          set_has_angle_z_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.WhirlVel)
  return target;
}

int WhirlVel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float angle_x_vel = 1;
    if (has_angle_x_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (has_angle_y_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (has_angle_z_vel()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhirlVel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhirlVel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_x_vel()) {
      set_angle_x_vel(from.angle_x_vel());
    }
    if (from.has_angle_y_vel()) {
      set_angle_y_vel(from.angle_y_vel());
    }
    if (from.has_angle_z_vel()) {
      set_angle_z_vel(from.angle_z_vel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {

  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other != this) {
    std::swap(angle_x_vel_, other->angle_x_vel_);
    std::swap(angle_y_vel_, other->angle_y_vel_);
    std::swap(angle_z_vel_, other->angle_z_vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhirlVel_descriptor_;
  metadata.reflection = WhirlVel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiRobot::kStartPositionFieldNumber;
#endif  // !_MSC_VER

MultiRobot::MultiRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.MultiRobot)
}

void MultiRobot::InitAsDefaultInstance() {
  start_position_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

MultiRobot::MultiRobot(const MultiRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.MultiRobot)
}

void MultiRobot::SharedCtor() {
  _cached_size_ = 0;
  start_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRobot::~MultiRobot() {
  // @@protoc_insertion_point(destructor:roborts_decision.MultiRobot)
  SharedDtor();
}

void MultiRobot::SharedDtor() {
  if (this != default_instance_) {
    delete start_position_;
  }
}

void MultiRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRobot_descriptor_;
}

const MultiRobot& MultiRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

MultiRobot* MultiRobot::default_instance_ = NULL;

MultiRobot* MultiRobot::New() const {
  return new MultiRobot;
}

void MultiRobot::Clear() {
  if (has_start_position()) {
    if (start_position_ != NULL) start_position_->::roborts_decision::Point::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.MultiRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.Point start_position = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.MultiRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.MultiRobot)
  return false;
#undef DO_
}

void MultiRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.MultiRobot)
  // optional .roborts_decision.Point start_position = 7;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->start_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.MultiRobot)
}

::google::protobuf::uint8* MultiRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.MultiRobot)
  // optional .roborts_decision.Point start_position = 7;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->start_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.MultiRobot)
  return target;
}

int MultiRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .roborts_decision.Point start_position = 7;
    if (has_start_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRobot::MergeFrom(const MultiRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_position()) {
      mutable_start_position()->::roborts_decision::Point::MergeFrom(from.start_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRobot::CopyFrom(const MultiRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRobot::IsInitialized() const {

  return true;
}

void MultiRobot::Swap(MultiRobot* other) {
  if (other != this) {
    std::swap(start_position_, other->start_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRobot_descriptor_;
  metadata.reflection = MultiRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecisionConfig::kPointFieldNumber;
const int DecisionConfig::kSimulateFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBuffPointFieldNumber;
const int DecisionConfig::kSearchLimitFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kWingBotFieldNumber;
const int DecisionConfig::kMasterBotFieldNumber;
const int DecisionConfig::kWingBotTaskPointFieldNumber;
const int DecisionConfig::kSearchRegion1FieldNumber;
const int DecisionConfig::kSearchRegion2FieldNumber;
const int DecisionConfig::kSearchRegion3FieldNumber;
const int DecisionConfig::kSearchRegion4FieldNumber;
#endif  // !_MSC_VER

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::InitAsDefaultInstance() {
  escape_ = const_cast< ::roborts_decision::EscapeConstraint*>(&::roborts_decision::EscapeConstraint::default_instance());
  search_limit_ = const_cast< ::roborts_decision::SearchConstraint*>(&::roborts_decision::SearchConstraint::default_instance());
  whirl_vel_ = const_cast< ::roborts_decision::WhirlVel*>(&::roborts_decision::WhirlVel::default_instance());
  wing_bot_ = const_cast< ::roborts_decision::MultiRobot*>(&::roborts_decision::MultiRobot::default_instance());
  master_bot_ = const_cast< ::roborts_decision::MultiRobot*>(&::roborts_decision::MultiRobot::default_instance());
  wing_bot_task_point_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  _cached_size_ = 0;
  simulate_ = false;
  master_ = false;
  escape_ = NULL;
  search_limit_ = NULL;
  whirl_vel_ = NULL;
  wing_bot_ = NULL;
  master_bot_ = NULL;
  wing_bot_task_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  if (this != default_instance_) {
    delete escape_;
    delete search_limit_;
    delete whirl_vel_;
    delete wing_bot_;
    delete master_bot_;
    delete wing_bot_task_point_;
  }
}

void DecisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionConfig_descriptor_;
}

const DecisionConfig& DecisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DecisionConfig* DecisionConfig::default_instance_ = NULL;

DecisionConfig* DecisionConfig::New() const {
  return new DecisionConfig;
}

void DecisionConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecisionConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 238) {
    ZR_(simulate_, master_);
    if (has_escape()) {
      if (escape_ != NULL) escape_->::roborts_decision::EscapeConstraint::Clear();
    }
    if (has_search_limit()) {
      if (search_limit_ != NULL) search_limit_->::roborts_decision::SearchConstraint::Clear();
    }
    if (has_whirl_vel()) {
      if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
    }
    if (has_wing_bot()) {
      if (wing_bot_ != NULL) wing_bot_->::roborts_decision::MultiRobot::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_master_bot()) {
      if (master_bot_ != NULL) master_bot_->::roborts_decision::MultiRobot::Clear();
    }
    if (has_wing_bot_task_point()) {
      if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::roborts_decision::Point::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  point_.Clear();
  buff_point_.Clear();
  search_region_1_.Clear();
  search_region_2_.Clear();
  search_region_3_.Clear();
  search_region_4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.DecisionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_decision.Point point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectTag(16)) goto parse_simulate;
        break;
      }

      // optional bool simulate = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_simulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulate_)));
          set_has_simulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_escape;
        break;
      }

      // optional .roborts_decision.EscapeConstraint escape = 4;
      case 4: {
        if (tag == 34) {
         parse_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buff_point;
        break;
      }

      // repeated .roborts_decision.Point buff_point = 5;
      case 5: {
        if (tag == 42) {
         parse_buff_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buff_point;
        if (input->ExpectTag(50)) goto parse_search_limit;
        break;
      }

      // optional .roborts_decision.SearchConstraint search_limit = 6;
      case 6: {
        if (tag == 50) {
         parse_search_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_whirl_vel;
        break;
      }

      // optional .roborts_decision.WhirlVel whirl_vel = 7;
      case 7: {
        if (tag == 58) {
         parse_whirl_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wing_bot;
        break;
      }

      // optional .roborts_decision.MultiRobot wing_bot = 8;
      case 8: {
        if (tag == 66) {
         parse_wing_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_master_bot;
        break;
      }

      // optional .roborts_decision.MultiRobot master_bot = 9;
      case 9: {
        if (tag == 74) {
         parse_master_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wing_bot_task_point;
        break;
      }

      // optional .roborts_decision.Point wing_bot_task_point = 10;
      case 10: {
        if (tag == 82) {
         parse_wing_bot_task_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot_task_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_search_region_1;
        break;
      }

      // repeated .roborts_decision.Point search_region_1 = 11;
      case 11: {
        if (tag == 90) {
         parse_search_region_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_search_region_1;
        if (input->ExpectTag(98)) goto parse_search_region_2;
        break;
      }

      // repeated .roborts_decision.Point search_region_2 = 12;
      case 12: {
        if (tag == 98) {
         parse_search_region_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_search_region_2;
        if (input->ExpectTag(106)) goto parse_search_region_3;
        break;
      }

      // repeated .roborts_decision.Point search_region_3 = 13;
      case 13: {
        if (tag == 106) {
         parse_search_region_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_search_region_3;
        if (input->ExpectTag(114)) goto parse_search_region_4;
        break;
      }

      // repeated .roborts_decision.Point search_region_4 = 14;
      case 14: {
        if (tag == 114) {
         parse_search_region_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_search_region_4;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->simulate(), output);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // optional .roborts_decision.EscapeConstraint escape = 4;
  if (has_escape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->escape(), output);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_point(i), output);
  }

  // optional .roborts_decision.SearchConstraint search_limit = 6;
  if (has_search_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->search_limit(), output);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->whirl_vel(), output);
  }

  // optional .roborts_decision.MultiRobot wing_bot = 8;
  if (has_wing_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wing_bot(), output);
  }

  // optional .roborts_decision.MultiRobot master_bot = 9;
  if (has_master_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->master_bot(), output);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->wing_bot_task_point(), output);
  }

  // repeated .roborts_decision.Point search_region_1 = 11;
  for (int i = 0; i < this->search_region_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->search_region_1(i), output);
  }

  // repeated .roborts_decision.Point search_region_2 = 12;
  for (int i = 0; i < this->search_region_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->search_region_2(i), output);
  }

  // repeated .roborts_decision.Point search_region_3 = 13;
  for (int i = 0; i < this->search_region_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->search_region_3(i), output);
  }

  // repeated .roborts_decision.Point search_region_4 = 14;
  for (int i = 0; i < this->search_region_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->search_region_4(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.DecisionConfig)
  // repeated .roborts_decision.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->simulate(), target);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // optional .roborts_decision.EscapeConstraint escape = 4;
  if (has_escape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->escape(), target);
  }

  // repeated .roborts_decision.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buff_point(i), target);
  }

  // optional .roborts_decision.SearchConstraint search_limit = 6;
  if (has_search_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->search_limit(), target);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->whirl_vel(), target);
  }

  // optional .roborts_decision.MultiRobot wing_bot = 8;
  if (has_wing_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wing_bot(), target);
  }

  // optional .roborts_decision.MultiRobot master_bot = 9;
  if (has_master_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->master_bot(), target);
  }

  // optional .roborts_decision.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->wing_bot_task_point(), target);
  }

  // repeated .roborts_decision.Point search_region_1 = 11;
  for (int i = 0; i < this->search_region_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->search_region_1(i), target);
  }

  // repeated .roborts_decision.Point search_region_2 = 12;
  for (int i = 0; i < this->search_region_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->search_region_2(i), target);
  }

  // repeated .roborts_decision.Point search_region_3 = 13;
  for (int i = 0; i < this->search_region_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->search_region_3(i), target);
  }

  // repeated .roborts_decision.Point search_region_4 = 14;
  for (int i = 0; i < this->search_region_4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->search_region_4(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.DecisionConfig)
  return target;
}

int DecisionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool simulate = 2 [default = false];
    if (has_simulate()) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (has_master()) {
      total_size += 1 + 1;
    }

    // optional .roborts_decision.EscapeConstraint escape = 4;
    if (has_escape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escape());
    }

    // optional .roborts_decision.SearchConstraint search_limit = 6;
    if (has_search_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_limit());
    }

    // optional .roborts_decision.WhirlVel whirl_vel = 7;
    if (has_whirl_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->whirl_vel());
    }

    // optional .roborts_decision.MultiRobot wing_bot = 8;
    if (has_wing_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_bot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .roborts_decision.MultiRobot master_bot = 9;
    if (has_master_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_bot());
    }

    // optional .roborts_decision.Point wing_bot_task_point = 10;
    if (has_wing_bot_task_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_bot_task_point());
    }

  }
  // repeated .roborts_decision.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .roborts_decision.Point buff_point = 5;
  total_size += 1 * this->buff_point_size();
  for (int i = 0; i < this->buff_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_point(i));
  }

  // repeated .roborts_decision.Point search_region_1 = 11;
  total_size += 1 * this->search_region_1_size();
  for (int i = 0; i < this->search_region_1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_1(i));
  }

  // repeated .roborts_decision.Point search_region_2 = 12;
  total_size += 1 * this->search_region_2_size();
  for (int i = 0; i < this->search_region_2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_2(i));
  }

  // repeated .roborts_decision.Point search_region_3 = 13;
  total_size += 1 * this->search_region_3_size();
  for (int i = 0; i < this->search_region_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_3(i));
  }

  // repeated .roborts_decision.Point search_region_4 = 14;
  total_size += 1 * this->search_region_4_size();
  for (int i = 0; i < this->search_region_4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_4(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecisionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecisionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  buff_point_.MergeFrom(from.buff_point_);
  search_region_1_.MergeFrom(from.search_region_1_);
  search_region_2_.MergeFrom(from.search_region_2_);
  search_region_3_.MergeFrom(from.search_region_3_);
  search_region_4_.MergeFrom(from.search_region_4_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_simulate()) {
      set_simulate(from.simulate());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_escape()) {
      mutable_escape()->::roborts_decision::EscapeConstraint::MergeFrom(from.escape());
    }
    if (from.has_search_limit()) {
      mutable_search_limit()->::roborts_decision::SearchConstraint::MergeFrom(from.search_limit());
    }
    if (from.has_whirl_vel()) {
      mutable_whirl_vel()->::roborts_decision::WhirlVel::MergeFrom(from.whirl_vel());
    }
    if (from.has_wing_bot()) {
      mutable_wing_bot()->::roborts_decision::MultiRobot::MergeFrom(from.wing_bot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_master_bot()) {
      mutable_master_bot()->::roborts_decision::MultiRobot::MergeFrom(from.master_bot());
    }
    if (from.has_wing_bot_task_point()) {
      mutable_wing_bot_task_point()->::roborts_decision::Point::MergeFrom(from.wing_bot_task_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {

  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(simulate_, other->simulate_);
    std::swap(master_, other->master_);
    std::swap(escape_, other->escape_);
    buff_point_.Swap(&other->buff_point_);
    std::swap(search_limit_, other->search_limit_);
    std::swap(whirl_vel_, other->whirl_vel_);
    std::swap(wing_bot_, other->wing_bot_);
    std::swap(master_bot_, other->master_bot_);
    std::swap(wing_bot_task_point_, other->wing_bot_task_point_);
    search_region_1_.Swap(&other->search_region_1_);
    search_region_2_.Swap(&other->search_region_2_);
    search_region_3_.Swap(&other->search_region_3_);
    search_region_4_.Swap(&other->search_region_4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionConfig_descriptor_;
  metadata.reflection = DecisionConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
