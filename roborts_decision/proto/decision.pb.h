// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#ifndef PROTOBUF_decision_2eproto__INCLUDED
#define PROTOBUF_decision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_decision_2eproto();
void protobuf_AssignDesc_decision_2eproto();
void protobuf_ShutdownFile_decision_2eproto();

class Point;
class EscapeConstraint;
class SearchConstraint;
class WhirlVel;
class MultiRobot;
class DecisionConfig;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline float roll() const;
  inline void set_roll(float value);

  // optional float pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline float pitch() const;
  inline void set_pitch(float value);

  // optional float yaw = 6;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 6;
  inline float yaw() const;
  inline void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float roll_;
  float pitch_;
  float yaw_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class EscapeConstraint : public ::google::protobuf::Message {
 public:
  EscapeConstraint();
  virtual ~EscapeConstraint();

  EscapeConstraint(const EscapeConstraint& from);

  inline EscapeConstraint& operator=(const EscapeConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EscapeConstraint& default_instance();

  void Swap(EscapeConstraint* other);

  // implements Message ----------------------------------------------

  EscapeConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EscapeConstraint& from);
  void MergeFrom(const EscapeConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left_x_limit = 1;
  inline bool has_left_x_limit() const;
  inline void clear_left_x_limit();
  static const int kLeftXLimitFieldNumber = 1;
  inline float left_x_limit() const;
  inline void set_left_x_limit(float value);

  // optional float right_x_limit = 2;
  inline bool has_right_x_limit() const;
  inline void clear_right_x_limit();
  static const int kRightXLimitFieldNumber = 2;
  inline float right_x_limit() const;
  inline void set_right_x_limit(float value);

  // optional float robot_x_limit = 3;
  inline bool has_robot_x_limit() const;
  inline void clear_robot_x_limit();
  static const int kRobotXLimitFieldNumber = 3;
  inline float robot_x_limit() const;
  inline void set_robot_x_limit(float value);

  // optional float left_random_min_x = 4;
  inline bool has_left_random_min_x() const;
  inline void clear_left_random_min_x();
  static const int kLeftRandomMinXFieldNumber = 4;
  inline float left_random_min_x() const;
  inline void set_left_random_min_x(float value);

  // optional float left_random_max_x = 5;
  inline bool has_left_random_max_x() const;
  inline void clear_left_random_max_x();
  static const int kLeftRandomMaxXFieldNumber = 5;
  inline float left_random_max_x() const;
  inline void set_left_random_max_x(float value);

  // optional float right_random_min_x = 6;
  inline bool has_right_random_min_x() const;
  inline void clear_right_random_min_x();
  static const int kRightRandomMinXFieldNumber = 6;
  inline float right_random_min_x() const;
  inline void set_right_random_min_x(float value);

  // optional float right_random_max_x = 7;
  inline bool has_right_random_max_x() const;
  inline void clear_right_random_max_x();
  static const int kRightRandomMaxXFieldNumber = 7;
  inline float right_random_max_x() const;
  inline void set_right_random_max_x(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.EscapeConstraint)
 private:
  inline void set_has_left_x_limit();
  inline void clear_has_left_x_limit();
  inline void set_has_right_x_limit();
  inline void clear_has_right_x_limit();
  inline void set_has_robot_x_limit();
  inline void clear_has_robot_x_limit();
  inline void set_has_left_random_min_x();
  inline void clear_has_left_random_min_x();
  inline void set_has_left_random_max_x();
  inline void clear_has_left_random_max_x();
  inline void set_has_right_random_min_x();
  inline void clear_has_right_random_min_x();
  inline void set_has_right_random_max_x();
  inline void clear_has_right_random_max_x();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float left_x_limit_;
  float right_x_limit_;
  float robot_x_limit_;
  float left_random_min_x_;
  float left_random_max_x_;
  float right_random_min_x_;
  float right_random_max_x_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static EscapeConstraint* default_instance_;
};
// -------------------------------------------------------------------

class SearchConstraint : public ::google::protobuf::Message {
 public:
  SearchConstraint();
  virtual ~SearchConstraint();

  SearchConstraint(const SearchConstraint& from);

  inline SearchConstraint& operator=(const SearchConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchConstraint& default_instance();

  void Swap(SearchConstraint* other);

  // implements Message ----------------------------------------------

  SearchConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchConstraint& from);
  void MergeFrom(const SearchConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x_limit = 1;
  inline bool has_x_limit() const;
  inline void clear_x_limit();
  static const int kXLimitFieldNumber = 1;
  inline float x_limit() const;
  inline void set_x_limit(float value);

  // optional float y_limit = 2;
  inline bool has_y_limit() const;
  inline void clear_y_limit();
  static const int kYLimitFieldNumber = 2;
  inline float y_limit() const;
  inline void set_y_limit(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.SearchConstraint)
 private:
  inline void set_has_x_limit();
  inline void clear_has_x_limit();
  inline void set_has_y_limit();
  inline void clear_has_y_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_limit_;
  float y_limit_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static SearchConstraint* default_instance_;
};
// -------------------------------------------------------------------

class WhirlVel : public ::google::protobuf::Message {
 public:
  WhirlVel();
  virtual ~WhirlVel();

  WhirlVel(const WhirlVel& from);

  inline WhirlVel& operator=(const WhirlVel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhirlVel& default_instance();

  void Swap(WhirlVel* other);

  // implements Message ----------------------------------------------

  WhirlVel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhirlVel& from);
  void MergeFrom(const WhirlVel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle_x_vel = 1;
  inline bool has_angle_x_vel() const;
  inline void clear_angle_x_vel();
  static const int kAngleXVelFieldNumber = 1;
  inline float angle_x_vel() const;
  inline void set_angle_x_vel(float value);

  // optional float angle_y_vel = 2;
  inline bool has_angle_y_vel() const;
  inline void clear_angle_y_vel();
  static const int kAngleYVelFieldNumber = 2;
  inline float angle_y_vel() const;
  inline void set_angle_y_vel(float value);

  // optional float angle_z_vel = 3;
  inline bool has_angle_z_vel() const;
  inline void clear_angle_z_vel();
  static const int kAngleZVelFieldNumber = 3;
  inline float angle_z_vel() const;
  inline void set_angle_z_vel(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.WhirlVel)
 private:
  inline void set_has_angle_x_vel();
  inline void clear_has_angle_x_vel();
  inline void set_has_angle_y_vel();
  inline void clear_has_angle_y_vel();
  inline void set_has_angle_z_vel();
  inline void clear_has_angle_z_vel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float angle_x_vel_;
  float angle_y_vel_;
  float angle_z_vel_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static WhirlVel* default_instance_;
};
// -------------------------------------------------------------------

class MultiRobot : public ::google::protobuf::Message {
 public:
  MultiRobot();
  virtual ~MultiRobot();

  MultiRobot(const MultiRobot& from);

  inline MultiRobot& operator=(const MultiRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiRobot& default_instance();

  void Swap(MultiRobot* other);

  // implements Message ----------------------------------------------

  MultiRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiRobot& from);
  void MergeFrom(const MultiRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .roborts_decision.Point start_position = 7;
  inline bool has_start_position() const;
  inline void clear_start_position();
  static const int kStartPositionFieldNumber = 7;
  inline const ::roborts_decision::Point& start_position() const;
  inline ::roborts_decision::Point* mutable_start_position();
  inline ::roborts_decision::Point* release_start_position();
  inline void set_allocated_start_position(::roborts_decision::Point* start_position);

  // @@protoc_insertion_point(class_scope:roborts_decision.MultiRobot)
 private:
  inline void set_has_start_position();
  inline void clear_has_start_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::roborts_decision::Point* start_position_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static MultiRobot* default_instance_;
};
// -------------------------------------------------------------------

class DecisionConfig : public ::google::protobuf::Message {
 public:
  DecisionConfig();
  virtual ~DecisionConfig();

  DecisionConfig(const DecisionConfig& from);

  inline DecisionConfig& operator=(const DecisionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionConfig& default_instance();

  void Swap(DecisionConfig* other);

  // implements Message ----------------------------------------------

  DecisionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecisionConfig& from);
  void MergeFrom(const DecisionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .roborts_decision.Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::roborts_decision::Point& point(int index) const;
  inline ::roborts_decision::Point* mutable_point(int index);
  inline ::roborts_decision::Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_point();

  // optional bool simulate = 2 [default = false];
  inline bool has_simulate() const;
  inline void clear_simulate();
  static const int kSimulateFieldNumber = 2;
  inline bool simulate() const;
  inline void set_simulate(bool value);

  // optional bool master = 3 [default = false];
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline bool master() const;
  inline void set_master(bool value);

  // optional .roborts_decision.EscapeConstraint escape = 4;
  inline bool has_escape() const;
  inline void clear_escape();
  static const int kEscapeFieldNumber = 4;
  inline const ::roborts_decision::EscapeConstraint& escape() const;
  inline ::roborts_decision::EscapeConstraint* mutable_escape();
  inline ::roborts_decision::EscapeConstraint* release_escape();
  inline void set_allocated_escape(::roborts_decision::EscapeConstraint* escape);

  // repeated .roborts_decision.Point buff_point = 5;
  inline int buff_point_size() const;
  inline void clear_buff_point();
  static const int kBuffPointFieldNumber = 5;
  inline const ::roborts_decision::Point& buff_point(int index) const;
  inline ::roborts_decision::Point* mutable_buff_point(int index);
  inline ::roborts_decision::Point* add_buff_point();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      buff_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_buff_point();

  // optional .roborts_decision.SearchConstraint search_limit = 6;
  inline bool has_search_limit() const;
  inline void clear_search_limit();
  static const int kSearchLimitFieldNumber = 6;
  inline const ::roborts_decision::SearchConstraint& search_limit() const;
  inline ::roborts_decision::SearchConstraint* mutable_search_limit();
  inline ::roborts_decision::SearchConstraint* release_search_limit();
  inline void set_allocated_search_limit(::roborts_decision::SearchConstraint* search_limit);

  // optional .roborts_decision.WhirlVel whirl_vel = 7;
  inline bool has_whirl_vel() const;
  inline void clear_whirl_vel();
  static const int kWhirlVelFieldNumber = 7;
  inline const ::roborts_decision::WhirlVel& whirl_vel() const;
  inline ::roborts_decision::WhirlVel* mutable_whirl_vel();
  inline ::roborts_decision::WhirlVel* release_whirl_vel();
  inline void set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel);

  // optional .roborts_decision.MultiRobot wing_bot = 8;
  inline bool has_wing_bot() const;
  inline void clear_wing_bot();
  static const int kWingBotFieldNumber = 8;
  inline const ::roborts_decision::MultiRobot& wing_bot() const;
  inline ::roborts_decision::MultiRobot* mutable_wing_bot();
  inline ::roborts_decision::MultiRobot* release_wing_bot();
  inline void set_allocated_wing_bot(::roborts_decision::MultiRobot* wing_bot);

  // optional .roborts_decision.MultiRobot master_bot = 9;
  inline bool has_master_bot() const;
  inline void clear_master_bot();
  static const int kMasterBotFieldNumber = 9;
  inline const ::roborts_decision::MultiRobot& master_bot() const;
  inline ::roborts_decision::MultiRobot* mutable_master_bot();
  inline ::roborts_decision::MultiRobot* release_master_bot();
  inline void set_allocated_master_bot(::roborts_decision::MultiRobot* master_bot);

  // optional .roborts_decision.Point wing_bot_task_point = 10;
  inline bool has_wing_bot_task_point() const;
  inline void clear_wing_bot_task_point();
  static const int kWingBotTaskPointFieldNumber = 10;
  inline const ::roborts_decision::Point& wing_bot_task_point() const;
  inline ::roborts_decision::Point* mutable_wing_bot_task_point();
  inline ::roborts_decision::Point* release_wing_bot_task_point();
  inline void set_allocated_wing_bot_task_point(::roborts_decision::Point* wing_bot_task_point);

  // repeated .roborts_decision.Point search_region_1 = 11;
  inline int search_region_1_size() const;
  inline void clear_search_region_1();
  static const int kSearchRegion1FieldNumber = 11;
  inline const ::roborts_decision::Point& search_region_1(int index) const;
  inline ::roborts_decision::Point* mutable_search_region_1(int index);
  inline ::roborts_decision::Point* add_search_region_1();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_1();

  // repeated .roborts_decision.Point search_region_2 = 12;
  inline int search_region_2_size() const;
  inline void clear_search_region_2();
  static const int kSearchRegion2FieldNumber = 12;
  inline const ::roborts_decision::Point& search_region_2(int index) const;
  inline ::roborts_decision::Point* mutable_search_region_2(int index);
  inline ::roborts_decision::Point* add_search_region_2();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_2();

  // repeated .roborts_decision.Point search_region_3 = 13;
  inline int search_region_3_size() const;
  inline void clear_search_region_3();
  static const int kSearchRegion3FieldNumber = 13;
  inline const ::roborts_decision::Point& search_region_3(int index) const;
  inline ::roborts_decision::Point* mutable_search_region_3(int index);
  inline ::roborts_decision::Point* add_search_region_3();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_3() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_3();

  // repeated .roborts_decision.Point search_region_4 = 14;
  inline int search_region_4_size() const;
  inline void clear_search_region_4();
  static const int kSearchRegion4FieldNumber = 14;
  inline const ::roborts_decision::Point& search_region_4(int index) const;
  inline ::roborts_decision::Point* mutable_search_region_4(int index);
  inline ::roborts_decision::Point* add_search_region_4();
  inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
      search_region_4() const;
  inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
      mutable_search_region_4();

  // @@protoc_insertion_point(class_scope:roborts_decision.DecisionConfig)
 private:
  inline void set_has_simulate();
  inline void clear_has_simulate();
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_escape();
  inline void clear_has_escape();
  inline void set_has_search_limit();
  inline void clear_has_search_limit();
  inline void set_has_whirl_vel();
  inline void clear_has_whirl_vel();
  inline void set_has_wing_bot();
  inline void clear_has_wing_bot();
  inline void set_has_master_bot();
  inline void clear_has_master_bot();
  inline void set_has_wing_bot_task_point();
  inline void clear_has_wing_bot_task_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > point_;
  ::roborts_decision::EscapeConstraint* escape_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > buff_point_;
  ::roborts_decision::SearchConstraint* search_limit_;
  ::roborts_decision::WhirlVel* whirl_vel_;
  ::roborts_decision::MultiRobot* wing_bot_;
  ::roborts_decision::MultiRobot* master_bot_;
  ::roborts_decision::Point* wing_bot_task_point_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_1_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_2_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_3_;
  ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point > search_region_4_;
  bool simulate_;
  bool master_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static DecisionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// optional float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.x)
}

// optional float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.y)
}

// optional float z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.z)
}

// optional float roll = 4;
inline bool Point::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float Point::roll() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.roll)
  return roll_;
}
inline void Point::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.roll)
}

// optional float pitch = 5;
inline bool Point::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float Point::pitch() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.pitch)
  return pitch_;
}
inline void Point::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.pitch)
}

// optional float yaw = 6;
inline bool Point::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Point::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Point::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Point::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Point::yaw() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.yaw)
  return yaw_;
}
inline void Point::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.yaw)
}

// -------------------------------------------------------------------

// EscapeConstraint

// optional float left_x_limit = 1;
inline bool EscapeConstraint::has_left_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EscapeConstraint::set_has_left_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EscapeConstraint::clear_has_left_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
  clear_has_left_x_limit();
}
inline float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_x_limit)
  return left_x_limit_;
}
inline void EscapeConstraint::set_left_x_limit(float value) {
  set_has_left_x_limit();
  left_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
inline bool EscapeConstraint::has_right_x_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EscapeConstraint::set_has_right_x_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EscapeConstraint::clear_has_right_x_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
  clear_has_right_x_limit();
}
inline float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_x_limit)
  return right_x_limit_;
}
inline void EscapeConstraint::set_right_x_limit(float value) {
  set_has_right_x_limit();
  right_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
inline bool EscapeConstraint::has_robot_x_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EscapeConstraint::set_has_robot_x_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EscapeConstraint::clear_has_robot_x_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
  clear_has_robot_x_limit();
}
inline float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.robot_x_limit)
  return robot_x_limit_;
}
inline void EscapeConstraint::set_robot_x_limit(float value) {
  set_has_robot_x_limit();
  robot_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
inline bool EscapeConstraint::has_left_random_min_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EscapeConstraint::set_has_left_random_min_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EscapeConstraint::clear_has_left_random_min_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
  clear_has_left_random_min_x();
}
inline float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_min_x)
  return left_random_min_x_;
}
inline void EscapeConstraint::set_left_random_min_x(float value) {
  set_has_left_random_min_x();
  left_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
inline bool EscapeConstraint::has_left_random_max_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EscapeConstraint::set_has_left_random_max_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EscapeConstraint::clear_has_left_random_max_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
  clear_has_left_random_max_x();
}
inline float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_max_x)
  return left_random_max_x_;
}
inline void EscapeConstraint::set_left_random_max_x(float value) {
  set_has_left_random_max_x();
  left_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
inline bool EscapeConstraint::has_right_random_min_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EscapeConstraint::set_has_right_random_min_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EscapeConstraint::clear_has_right_random_min_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
  clear_has_right_random_min_x();
}
inline float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_min_x)
  return right_random_min_x_;
}
inline void EscapeConstraint::set_right_random_min_x(float value) {
  set_has_right_random_min_x();
  right_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
inline bool EscapeConstraint::has_right_random_max_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EscapeConstraint::set_has_right_random_max_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EscapeConstraint::clear_has_right_random_max_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
  clear_has_right_random_max_x();
}
inline float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_max_x)
  return right_random_max_x_;
}
inline void EscapeConstraint::set_right_random_max_x(float value) {
  set_has_right_random_max_x();
  right_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_max_x)
}

// -------------------------------------------------------------------

// SearchConstraint

// optional float x_limit = 1;
inline bool SearchConstraint::has_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchConstraint::set_has_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchConstraint::clear_has_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
  clear_has_x_limit();
}
inline float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.x_limit)
  return x_limit_;
}
inline void SearchConstraint::set_x_limit(float value) {
  set_has_x_limit();
  x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
inline bool SearchConstraint::has_y_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchConstraint::set_has_y_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchConstraint::clear_has_y_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
  clear_has_y_limit();
}
inline float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.y_limit)
  return y_limit_;
}
inline void SearchConstraint::set_y_limit(float value) {
  set_has_y_limit();
  y_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.y_limit)
}

// -------------------------------------------------------------------

// WhirlVel

// optional float angle_x_vel = 1;
inline bool WhirlVel::has_angle_x_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhirlVel::set_has_angle_x_vel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhirlVel::clear_has_angle_x_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
  clear_has_angle_x_vel();
}
inline float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_x_vel)
  return angle_x_vel_;
}
inline void WhirlVel::set_angle_x_vel(float value) {
  set_has_angle_x_vel();
  angle_x_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
inline bool WhirlVel::has_angle_y_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhirlVel::set_has_angle_y_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhirlVel::clear_has_angle_y_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
  clear_has_angle_y_vel();
}
inline float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_y_vel)
  return angle_y_vel_;
}
inline void WhirlVel::set_angle_y_vel(float value) {
  set_has_angle_y_vel();
  angle_y_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
inline bool WhirlVel::has_angle_z_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhirlVel::set_has_angle_z_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhirlVel::clear_has_angle_z_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
  clear_has_angle_z_vel();
}
inline float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_z_vel)
  return angle_z_vel_;
}
inline void WhirlVel::set_angle_z_vel(float value) {
  set_has_angle_z_vel();
  angle_z_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_z_vel)
}

// -------------------------------------------------------------------

// MultiRobot

// optional .roborts_decision.Point start_position = 7;
inline bool MultiRobot::has_start_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiRobot::set_has_start_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiRobot::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiRobot::clear_start_position() {
  if (start_position_ != NULL) start_position_->::roborts_decision::Point::Clear();
  clear_has_start_position();
}
inline const ::roborts_decision::Point& MultiRobot::start_position() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MultiRobot.start_position)
  return start_position_ != NULL ? *start_position_ : *default_instance_->start_position_;
}
inline ::roborts_decision::Point* MultiRobot::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) start_position_ = new ::roborts_decision::Point;
  // @@protoc_insertion_point(field_mutable:roborts_decision.MultiRobot.start_position)
  return start_position_;
}
inline ::roborts_decision::Point* MultiRobot::release_start_position() {
  clear_has_start_position();
  ::roborts_decision::Point* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
inline void MultiRobot::set_allocated_start_position(::roborts_decision::Point* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MultiRobot.start_position)
}

// -------------------------------------------------------------------

// DecisionConfig

// repeated .roborts_decision.Point point = 1;
inline int DecisionConfig::point_size() const {
  return point_.size();
}
inline void DecisionConfig::clear_point() {
  point_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::point(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.point)
  return point_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.point)
  return point_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_point() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::point() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.point)
  return &point_;
}

// optional bool simulate = 2 [default = false];
inline bool DecisionConfig::has_simulate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecisionConfig::set_has_simulate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecisionConfig::clear_has_simulate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecisionConfig::clear_simulate() {
  simulate_ = false;
  clear_has_simulate();
}
inline bool DecisionConfig::simulate() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.simulate)
  return simulate_;
}
inline void DecisionConfig::set_simulate(bool value) {
  set_has_simulate();
  simulate_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.simulate)
}

// optional bool master = 3 [default = false];
inline bool DecisionConfig::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecisionConfig::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecisionConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecisionConfig::clear_master() {
  master_ = false;
  clear_has_master();
}
inline bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master)
  return master_;
}
inline void DecisionConfig::set_master(bool value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master)
}

// optional .roborts_decision.EscapeConstraint escape = 4;
inline bool DecisionConfig::has_escape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DecisionConfig::set_has_escape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DecisionConfig::clear_has_escape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DecisionConfig::clear_escape() {
  if (escape_ != NULL) escape_->::roborts_decision::EscapeConstraint::Clear();
  clear_has_escape();
}
inline const ::roborts_decision::EscapeConstraint& DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.escape)
  return escape_ != NULL ? *escape_ : *default_instance_->escape_;
}
inline ::roborts_decision::EscapeConstraint* DecisionConfig::mutable_escape() {
  set_has_escape();
  if (escape_ == NULL) escape_ = new ::roborts_decision::EscapeConstraint;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.escape)
  return escape_;
}
inline ::roborts_decision::EscapeConstraint* DecisionConfig::release_escape() {
  clear_has_escape();
  ::roborts_decision::EscapeConstraint* temp = escape_;
  escape_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_escape(::roborts_decision::EscapeConstraint* escape) {
  delete escape_;
  escape_ = escape;
  if (escape) {
    set_has_escape();
  } else {
    clear_has_escape();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.escape)
}

// repeated .roborts_decision.Point buff_point = 5;
inline int DecisionConfig::buff_point_size() const {
  return buff_point_.size();
}
inline void DecisionConfig::clear_buff_point() {
  buff_point_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::buff_point(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_buff_point(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_buff_point() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.buff_point)
  return buff_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::buff_point() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.buff_point)
  return buff_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_buff_point() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.buff_point)
  return &buff_point_;
}

// optional .roborts_decision.SearchConstraint search_limit = 6;
inline bool DecisionConfig::has_search_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DecisionConfig::set_has_search_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DecisionConfig::clear_has_search_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DecisionConfig::clear_search_limit() {
  if (search_limit_ != NULL) search_limit_->::roborts_decision::SearchConstraint::Clear();
  clear_has_search_limit();
}
inline const ::roborts_decision::SearchConstraint& DecisionConfig::search_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_limit)
  return search_limit_ != NULL ? *search_limit_ : *default_instance_->search_limit_;
}
inline ::roborts_decision::SearchConstraint* DecisionConfig::mutable_search_limit() {
  set_has_search_limit();
  if (search_limit_ == NULL) search_limit_ = new ::roborts_decision::SearchConstraint;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_limit)
  return search_limit_;
}
inline ::roborts_decision::SearchConstraint* DecisionConfig::release_search_limit() {
  clear_has_search_limit();
  ::roborts_decision::SearchConstraint* temp = search_limit_;
  search_limit_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_search_limit(::roborts_decision::SearchConstraint* search_limit) {
  delete search_limit_;
  search_limit_ = search_limit;
  if (search_limit) {
    set_has_search_limit();
  } else {
    clear_has_search_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.search_limit)
}

// optional .roborts_decision.WhirlVel whirl_vel = 7;
inline bool DecisionConfig::has_whirl_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DecisionConfig::set_has_whirl_vel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DecisionConfig::clear_has_whirl_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DecisionConfig::clear_whirl_vel() {
  if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
  clear_has_whirl_vel();
}
inline const ::roborts_decision::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_ != NULL ? *whirl_vel_ : *default_instance_->whirl_vel_;
}
inline ::roborts_decision::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  set_has_whirl_vel();
  if (whirl_vel_ == NULL) whirl_vel_ = new ::roborts_decision::WhirlVel;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_;
}
inline ::roborts_decision::WhirlVel* DecisionConfig::release_whirl_vel() {
  clear_has_whirl_vel();
  ::roborts_decision::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel) {
  delete whirl_vel_;
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    set_has_whirl_vel();
  } else {
    clear_has_whirl_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.whirl_vel)
}

// optional .roborts_decision.MultiRobot wing_bot = 8;
inline bool DecisionConfig::has_wing_bot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DecisionConfig::set_has_wing_bot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DecisionConfig::clear_has_wing_bot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DecisionConfig::clear_wing_bot() {
  if (wing_bot_ != NULL) wing_bot_->::roborts_decision::MultiRobot::Clear();
  clear_has_wing_bot();
}
inline const ::roborts_decision::MultiRobot& DecisionConfig::wing_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.wing_bot)
  return wing_bot_ != NULL ? *wing_bot_ : *default_instance_->wing_bot_;
}
inline ::roborts_decision::MultiRobot* DecisionConfig::mutable_wing_bot() {
  set_has_wing_bot();
  if (wing_bot_ == NULL) wing_bot_ = new ::roborts_decision::MultiRobot;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.wing_bot)
  return wing_bot_;
}
inline ::roborts_decision::MultiRobot* DecisionConfig::release_wing_bot() {
  clear_has_wing_bot();
  ::roborts_decision::MultiRobot* temp = wing_bot_;
  wing_bot_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_wing_bot(::roborts_decision::MultiRobot* wing_bot) {
  delete wing_bot_;
  wing_bot_ = wing_bot;
  if (wing_bot) {
    set_has_wing_bot();
  } else {
    clear_has_wing_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.wing_bot)
}

// optional .roborts_decision.MultiRobot master_bot = 9;
inline bool DecisionConfig::has_master_bot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DecisionConfig::set_has_master_bot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DecisionConfig::clear_has_master_bot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DecisionConfig::clear_master_bot() {
  if (master_bot_ != NULL) master_bot_->::roborts_decision::MultiRobot::Clear();
  clear_has_master_bot();
}
inline const ::roborts_decision::MultiRobot& DecisionConfig::master_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master_bot)
  return master_bot_ != NULL ? *master_bot_ : *default_instance_->master_bot_;
}
inline ::roborts_decision::MultiRobot* DecisionConfig::mutable_master_bot() {
  set_has_master_bot();
  if (master_bot_ == NULL) master_bot_ = new ::roborts_decision::MultiRobot;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.master_bot)
  return master_bot_;
}
inline ::roborts_decision::MultiRobot* DecisionConfig::release_master_bot() {
  clear_has_master_bot();
  ::roborts_decision::MultiRobot* temp = master_bot_;
  master_bot_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_master_bot(::roborts_decision::MultiRobot* master_bot) {
  delete master_bot_;
  master_bot_ = master_bot;
  if (master_bot) {
    set_has_master_bot();
  } else {
    clear_has_master_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.master_bot)
}

// optional .roborts_decision.Point wing_bot_task_point = 10;
inline bool DecisionConfig::has_wing_bot_task_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DecisionConfig::set_has_wing_bot_task_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DecisionConfig::clear_has_wing_bot_task_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DecisionConfig::clear_wing_bot_task_point() {
  if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::roborts_decision::Point::Clear();
  clear_has_wing_bot_task_point();
}
inline const ::roborts_decision::Point& DecisionConfig::wing_bot_task_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_ != NULL ? *wing_bot_task_point_ : *default_instance_->wing_bot_task_point_;
}
inline ::roborts_decision::Point* DecisionConfig::mutable_wing_bot_task_point() {
  set_has_wing_bot_task_point();
  if (wing_bot_task_point_ == NULL) wing_bot_task_point_ = new ::roborts_decision::Point;
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_;
}
inline ::roborts_decision::Point* DecisionConfig::release_wing_bot_task_point() {
  clear_has_wing_bot_task_point();
  ::roborts_decision::Point* temp = wing_bot_task_point_;
  wing_bot_task_point_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_wing_bot_task_point(::roborts_decision::Point* wing_bot_task_point) {
  delete wing_bot_task_point_;
  wing_bot_task_point_ = wing_bot_task_point;
  if (wing_bot_task_point) {
    set_has_wing_bot_task_point();
  } else {
    clear_has_wing_bot_task_point();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.wing_bot_task_point)
}

// repeated .roborts_decision.Point search_region_1 = 11;
inline int DecisionConfig::search_region_1_size() const {
  return search_region_1_.size();
}
inline void DecisionConfig::clear_search_region_1() {
  search_region_1_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_1(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_1(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_1() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_1() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_1() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_1)
  return &search_region_1_;
}

// repeated .roborts_decision.Point search_region_2 = 12;
inline int DecisionConfig::search_region_2_size() const {
  return search_region_2_.size();
}
inline void DecisionConfig::clear_search_region_2() {
  search_region_2_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_2(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_2(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_2() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_2() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_2() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_2)
  return &search_region_2_;
}

// repeated .roborts_decision.Point search_region_3 = 13;
inline int DecisionConfig::search_region_3_size() const {
  return search_region_3_.size();
}
inline void DecisionConfig::clear_search_region_3() {
  search_region_3_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_3(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_3(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_3() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_3() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_3() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_3)
  return &search_region_3_;
}

// repeated .roborts_decision.Point search_region_4 = 14;
inline int DecisionConfig::search_region_4_size() const {
  return search_region_4_.size();
}
inline void DecisionConfig::clear_search_region_4() {
  search_region_4_.Clear();
}
inline const ::roborts_decision::Point& DecisionConfig::search_region_4(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Get(index);
}
inline ::roborts_decision::Point* DecisionConfig::mutable_search_region_4(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Mutable(index);
}
inline ::roborts_decision::Point* DecisionConfig::add_search_region_4() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_4() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_;
}
inline ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_4() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_4)
  return &search_region_4_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_decision_2eproto__INCLUDED
