// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camera_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_camera {

namespace {

const ::google::protobuf::Descriptor* CameraMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraDistortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraDistortion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cameras_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cameras_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_camera_5fparam_2eproto() {
  protobuf_AddDesc_camera_5fparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "camera_param.proto");
  GOOGLE_CHECK(file != NULL);
  CameraMatrix_descriptor_ = file->message_type(0);
  static const int CameraMatrix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, data_),
  };
  CameraMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraMatrix_descriptor_,
      CameraMatrix::default_instance_,
      CameraMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraMatrix));
  CameraDistortion_descriptor_ = file->message_type(1);
  static const int CameraDistortion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, data_),
  };
  CameraDistortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraDistortion_descriptor_,
      CameraDistortion::default_instance_,
      CameraDistortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraDistortion));
  Resolution_descriptor_ = file->message_type(2);
  static const int Resolution_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, width_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, height_offset_),
  };
  Resolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resolution_descriptor_,
      Resolution::default_instance_,
      Resolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resolution));
  Camera_descriptor_ = file->message_type(3);
  static const int Camera_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, auto_exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, exposure_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, exposure_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, auto_white_balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, auto_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, contrast_),
  };
  Camera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camera_descriptor_,
      Camera::default_instance_,
      Camera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camera));
  Cameras_descriptor_ = file->message_type(4);
  static const int Cameras_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, camera_),
  };
  Cameras_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cameras_descriptor_,
      Cameras::default_instance_,
      Cameras_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cameras));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_camera_5fparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraMatrix_descriptor_, &CameraMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraDistortion_descriptor_, &CameraDistortion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resolution_descriptor_, &Resolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camera_descriptor_, &Camera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cameras_descriptor_, &Cameras::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_camera_5fparam_2eproto() {
  delete CameraMatrix::default_instance_;
  delete CameraMatrix_reflection_;
  delete CameraDistortion::default_instance_;
  delete CameraDistortion_reflection_;
  delete Resolution::default_instance_;
  delete Resolution_reflection_;
  delete Camera::default_instance_;
  delete Camera_reflection_;
  delete Cameras::default_instance_;
  delete Cameras_reflection_;
}

void protobuf_AddDesc_camera_5fparam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022camera_param.proto\022\016roborts_camera\"\034\n\014"
    "CameraMatrix\022\014\n\004data\030\001 \003(\001\" \n\020CameraDist"
    "ortion\022\014\n\004data\030\001 \003(\001\"X\n\nResolution\022\r\n\005wi"
    "dth\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\022\024\n\014width_offse"
    "t\030\003 \002(\r\022\025\n\rheight_offset\030\004 \002(\r\"\375\002\n\006Camer"
    "a\022\023\n\013camera_name\030\001 \002(\t\022\023\n\013camera_type\030\002 "
    "\002(\t\022\023\n\013camera_path\030\003 \002(\t\0223\n\rcamera_matri"
    "x\030\004 \002(\0132\034.roborts_camera.CameraMatrix\022;\n"
    "\021camera_distortion\030\005 \002(\0132 .roborts_camer"
    "a.CameraDistortion\022\013\n\003fps\030\006 \001(\r\022.\n\nresol"
    "ution\030\007 \001(\0132\032.roborts_camera.Resolution\022"
    "\025\n\rauto_exposure\030\010 \001(\010\022\026\n\016exposure_value"
    "\030\t \001(\r\022\025\n\rexposure_time\030\n \001(\r\022\032\n\022auto_wh"
    "ite_balance\030\013 \001(\010\022\021\n\tauto_gain\030\014 \001(\010\022\020\n\010"
    "contrast\030\r \001(\r\"1\n\007Cameras\022&\n\006camera\030\001 \003("
    "\0132\026.roborts_camera.Camera", 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_param.proto", &protobuf_RegisterTypes);
  CameraMatrix::default_instance_ = new CameraMatrix();
  CameraDistortion::default_instance_ = new CameraDistortion();
  Resolution::default_instance_ = new Resolution();
  Camera::default_instance_ = new Camera();
  Cameras::default_instance_ = new Cameras();
  CameraMatrix::default_instance_->InitAsDefaultInstance();
  CameraDistortion::default_instance_->InitAsDefaultInstance();
  Resolution::default_instance_->InitAsDefaultInstance();
  Camera::default_instance_->InitAsDefaultInstance();
  Cameras::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_camera_5fparam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_camera_5fparam_2eproto {
  StaticDescriptorInitializer_camera_5fparam_2eproto() {
    protobuf_AddDesc_camera_5fparam_2eproto();
  }
} static_descriptor_initializer_camera_5fparam_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CameraMatrix::kDataFieldNumber;
#endif  // !_MSC_VER

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.CameraMatrix)
}

void CameraMatrix::InitAsDefaultInstance() {
}

CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:roborts_camera.CameraMatrix)
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraMatrix_descriptor_;
}

const CameraMatrix& CameraMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5fparam_2eproto();
  return *default_instance_;
}

CameraMatrix* CameraMatrix::default_instance_ = NULL;

CameraMatrix* CameraMatrix::New() const {
  return new CameraMatrix;
}

void CameraMatrix::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.CameraMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (tag == 9) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.CameraMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.CameraMatrix)
  return false;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.CameraMatrix)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.CameraMatrix)
}

::google::protobuf::uint8* CameraMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.CameraMatrix)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.CameraMatrix)
  return target;
}

int CameraMatrix::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {

  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraMatrix_descriptor_;
  metadata.reflection = CameraMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraDistortion::kDataFieldNumber;
#endif  // !_MSC_VER

CameraDistortion::CameraDistortion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.CameraDistortion)
}

void CameraDistortion::InitAsDefaultInstance() {
}

CameraDistortion::CameraDistortion(const CameraDistortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.CameraDistortion)
}

void CameraDistortion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraDistortion::~CameraDistortion() {
  // @@protoc_insertion_point(destructor:roborts_camera.CameraDistortion)
  SharedDtor();
}

void CameraDistortion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraDistortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDistortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraDistortion_descriptor_;
}

const CameraDistortion& CameraDistortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5fparam_2eproto();
  return *default_instance_;
}

CameraDistortion* CameraDistortion::default_instance_ = NULL;

CameraDistortion* CameraDistortion::New() const {
  return new CameraDistortion;
}

void CameraDistortion::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraDistortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.CameraDistortion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (tag == 9) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.CameraDistortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.CameraDistortion)
  return false;
#undef DO_
}

void CameraDistortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.CameraDistortion)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.CameraDistortion)
}

::google::protobuf::uint8* CameraDistortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.CameraDistortion)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.CameraDistortion)
  return target;
}

int CameraDistortion::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDistortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraDistortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraDistortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraDistortion::MergeFrom(const CameraDistortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraDistortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDistortion::CopyFrom(const CameraDistortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDistortion::IsInitialized() const {

  return true;
}

void CameraDistortion::Swap(CameraDistortion* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraDistortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraDistortion_descriptor_;
  metadata.reflection = CameraDistortion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resolution::kWidthFieldNumber;
const int Resolution::kHeightFieldNumber;
const int Resolution::kWidthOffsetFieldNumber;
const int Resolution::kHeightOffsetFieldNumber;
#endif  // !_MSC_VER

Resolution::Resolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Resolution)
}

void Resolution::InitAsDefaultInstance() {
}

Resolution::Resolution(const Resolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Resolution)
}

void Resolution::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  width_offset_ = 0u;
  height_offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:roborts_camera.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resolution_descriptor_;
}

const Resolution& Resolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5fparam_2eproto();
  return *default_instance_;
}

Resolution* Resolution::default_instance_ = NULL;

Resolution* Resolution::New() const {
  return new Resolution;
}

void Resolution::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Resolution*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Resolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width_offset;
        break;
      }

      // required uint32 width_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_width_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_offset_)));
          set_has_width_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height_offset;
        break;
      }

      // required uint32 height_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_height_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_offset_)));
          set_has_height_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Resolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Resolution)
  return false;
#undef DO_
}

void Resolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required uint32 width_offset = 3;
  if (has_width_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width_offset(), output);
  }

  // required uint32 height_offset = 4;
  if (has_height_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Resolution)
}

::google::protobuf::uint8* Resolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required uint32 width_offset = 3;
  if (has_width_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width_offset(), target);
  }

  // required uint32 height_offset = 4;
  if (has_height_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Resolution)
  return target;
}

int Resolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required uint32 width_offset = 3;
    if (has_width_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width_offset());
    }

    // required uint32 height_offset = 4;
    if (has_height_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width_offset()) {
      set_width_offset(from.width_offset());
    }
    if (from.has_height_offset()) {
      set_height_offset(from.height_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Resolution::Swap(Resolution* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(width_offset_, other->width_offset_);
    std::swap(height_offset_, other->height_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resolution_descriptor_;
  metadata.reflection = Resolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camera::kCameraNameFieldNumber;
const int Camera::kCameraTypeFieldNumber;
const int Camera::kCameraPathFieldNumber;
const int Camera::kCameraMatrixFieldNumber;
const int Camera::kCameraDistortionFieldNumber;
const int Camera::kFpsFieldNumber;
const int Camera::kResolutionFieldNumber;
const int Camera::kAutoExposureFieldNumber;
const int Camera::kExposureValueFieldNumber;
const int Camera::kExposureTimeFieldNumber;
const int Camera::kAutoWhiteBalanceFieldNumber;
const int Camera::kAutoGainFieldNumber;
const int Camera::kContrastFieldNumber;
#endif  // !_MSC_VER

Camera::Camera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Camera)
}

void Camera::InitAsDefaultInstance() {
  camera_matrix_ = const_cast< ::roborts_camera::CameraMatrix*>(&::roborts_camera::CameraMatrix::default_instance());
  camera_distortion_ = const_cast< ::roborts_camera::CameraDistortion*>(&::roborts_camera::CameraDistortion::default_instance());
  resolution_ = const_cast< ::roborts_camera::Resolution*>(&::roborts_camera::Resolution::default_instance());
}

Camera::Camera(const Camera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Camera)
}

void Camera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_matrix_ = NULL;
  camera_distortion_ = NULL;
  fps_ = 0u;
  resolution_ = NULL;
  auto_exposure_ = false;
  exposure_value_ = 0u;
  exposure_time_ = 0u;
  auto_white_balance_ = false;
  auto_gain_ = false;
  contrast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:roborts_camera.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_name_;
  }
  if (camera_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_type_;
  }
  if (camera_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_path_;
  }
  if (this != default_instance_) {
    delete camera_matrix_;
    delete camera_distortion_;
    delete resolution_;
  }
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_descriptor_;
}

const Camera& Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5fparam_2eproto();
  return *default_instance_;
}

Camera* Camera::default_instance_ = NULL;

Camera* Camera::New() const {
  return new Camera;
}

void Camera::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Camera*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_camera_name()) {
      if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_name_->clear();
      }
    }
    if (has_camera_type()) {
      if (camera_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_type_->clear();
      }
    }
    if (has_camera_path()) {
      if (camera_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_path_->clear();
      }
    }
    if (has_camera_matrix()) {
      if (camera_matrix_ != NULL) camera_matrix_->::roborts_camera::CameraMatrix::Clear();
    }
    if (has_camera_distortion()) {
      if (camera_distortion_ != NULL) camera_distortion_->::roborts_camera::CameraDistortion::Clear();
    }
    fps_ = 0u;
    if (has_resolution()) {
      if (resolution_ != NULL) resolution_->::roborts_camera::Resolution::Clear();
    }
    auto_exposure_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(exposure_value_, exposure_time_);
    ZR_(auto_white_balance_, contrast_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string camera_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), this->camera_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_type;
        break;
      }

      // required string camera_type = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_type().data(), this->camera_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera_path;
        break;
      }

      // required string camera_path = 3;
      case 3: {
        if (tag == 26) {
         parse_camera_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_path().data(), this->camera_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera_matrix;
        break;
      }

      // required .roborts_camera.CameraMatrix camera_matrix = 4;
      case 4: {
        if (tag == 34) {
         parse_camera_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_camera_distortion;
        break;
      }

      // required .roborts_camera.CameraDistortion camera_distortion = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_distortion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fps;
        break;
      }

      // optional uint32 fps = 6;
      case 6: {
        if (tag == 48) {
         parse_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fps_)));
          set_has_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_resolution;
        break;
      }

      // optional .roborts_camera.Resolution resolution = 7;
      case 7: {
        if (tag == 58) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_auto_exposure;
        break;
      }

      // optional bool auto_exposure = 8;
      case 8: {
        if (tag == 64) {
         parse_auto_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_exposure_)));
          set_has_auto_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exposure_value;
        break;
      }

      // optional uint32 exposure_value = 9;
      case 9: {
        if (tag == 72) {
         parse_exposure_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_value_)));
          set_has_exposure_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_exposure_time;
        break;
      }

      // optional uint32 exposure_time = 10;
      case 10: {
        if (tag == 80) {
         parse_exposure_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_time_)));
          set_has_exposure_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_auto_white_balance;
        break;
      }

      // optional bool auto_white_balance = 11;
      case 11: {
        if (tag == 88) {
         parse_auto_white_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_white_balance_)));
          set_has_auto_white_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_auto_gain;
        break;
      }

      // optional bool auto_gain = 12;
      case 12: {
        if (tag == 96) {
         parse_auto_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_gain_)));
          set_has_auto_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_contrast;
        break;
      }

      // optional uint32 contrast = 13;
      case 13: {
        if (tag == 104) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Camera)
  // required string camera_name = 1;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->camera_name(), output);
  }

  // required string camera_type = 2;
  if (has_camera_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_type().data(), this->camera_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_type(), output);
  }

  // required string camera_path = 3;
  if (has_camera_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_path().data(), this->camera_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->camera_path(), output);
  }

  // required .roborts_camera.CameraMatrix camera_matrix = 4;
  if (has_camera_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camera_matrix(), output);
  }

  // required .roborts_camera.CameraDistortion camera_distortion = 5;
  if (has_camera_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_distortion(), output);
  }

  // optional uint32 fps = 6;
  if (has_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fps(), output);
  }

  // optional .roborts_camera.Resolution resolution = 7;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->resolution(), output);
  }

  // optional bool auto_exposure = 8;
  if (has_auto_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->auto_exposure(), output);
  }

  // optional uint32 exposure_value = 9;
  if (has_exposure_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exposure_value(), output);
  }

  // optional uint32 exposure_time = 10;
  if (has_exposure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->exposure_time(), output);
  }

  // optional bool auto_white_balance = 11;
  if (has_auto_white_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_white_balance(), output);
  }

  // optional bool auto_gain = 12;
  if (has_auto_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->auto_gain(), output);
  }

  // optional uint32 contrast = 13;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->contrast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Camera)
}

::google::protobuf::uint8* Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Camera)
  // required string camera_name = 1;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera_name(), target);
  }

  // required string camera_type = 2;
  if (has_camera_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_type().data(), this->camera_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_type(), target);
  }

  // required string camera_path = 3;
  if (has_camera_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_path().data(), this->camera_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->camera_path(), target);
  }

  // required .roborts_camera.CameraMatrix camera_matrix = 4;
  if (has_camera_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camera_matrix(), target);
  }

  // required .roborts_camera.CameraDistortion camera_distortion = 5;
  if (has_camera_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_distortion(), target);
  }

  // optional uint32 fps = 6;
  if (has_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fps(), target);
  }

  // optional .roborts_camera.Resolution resolution = 7;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->resolution(), target);
  }

  // optional bool auto_exposure = 8;
  if (has_auto_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->auto_exposure(), target);
  }

  // optional uint32 exposure_value = 9;
  if (has_exposure_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exposure_value(), target);
  }

  // optional uint32 exposure_time = 10;
  if (has_exposure_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->exposure_time(), target);
  }

  // optional bool auto_white_balance = 11;
  if (has_auto_white_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_white_balance(), target);
  }

  // optional bool auto_gain = 12;
  if (has_auto_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->auto_gain(), target);
  }

  // optional uint32 contrast = 13;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->contrast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Camera)
  return target;
}

int Camera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string camera_name = 1;
    if (has_camera_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_name());
    }

    // required string camera_type = 2;
    if (has_camera_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_type());
    }

    // required string camera_path = 3;
    if (has_camera_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_path());
    }

    // required .roborts_camera.CameraMatrix camera_matrix = 4;
    if (has_camera_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_matrix());
    }

    // required .roborts_camera.CameraDistortion camera_distortion = 5;
    if (has_camera_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_distortion());
    }

    // optional uint32 fps = 6;
    if (has_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fps());
    }

    // optional .roborts_camera.Resolution resolution = 7;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolution());
    }

    // optional bool auto_exposure = 8;
    if (has_auto_exposure()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exposure_value = 9;
    if (has_exposure_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure_value());
    }

    // optional uint32 exposure_time = 10;
    if (has_exposure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure_time());
    }

    // optional bool auto_white_balance = 11;
    if (has_auto_white_balance()) {
      total_size += 1 + 1;
    }

    // optional bool auto_gain = 12;
    if (has_auto_gain()) {
      total_size += 1 + 1;
    }

    // optional uint32 contrast = 13;
    if (has_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_name()) {
      set_camera_name(from.camera_name());
    }
    if (from.has_camera_type()) {
      set_camera_type(from.camera_type());
    }
    if (from.has_camera_path()) {
      set_camera_path(from.camera_path());
    }
    if (from.has_camera_matrix()) {
      mutable_camera_matrix()->::roborts_camera::CameraMatrix::MergeFrom(from.camera_matrix());
    }
    if (from.has_camera_distortion()) {
      mutable_camera_distortion()->::roborts_camera::CameraDistortion::MergeFrom(from.camera_distortion());
    }
    if (from.has_fps()) {
      set_fps(from.fps());
    }
    if (from.has_resolution()) {
      mutable_resolution()->::roborts_camera::Resolution::MergeFrom(from.resolution());
    }
    if (from.has_auto_exposure()) {
      set_auto_exposure(from.auto_exposure());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exposure_value()) {
      set_exposure_value(from.exposure_value());
    }
    if (from.has_exposure_time()) {
      set_exposure_time(from.exposure_time());
    }
    if (from.has_auto_white_balance()) {
      set_auto_white_balance(from.auto_white_balance());
    }
    if (from.has_auto_gain()) {
      set_auto_gain(from.auto_gain());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_resolution()) {
    if (!this->resolution().IsInitialized()) return false;
  }
  return true;
}

void Camera::Swap(Camera* other) {
  if (other != this) {
    std::swap(camera_name_, other->camera_name_);
    std::swap(camera_type_, other->camera_type_);
    std::swap(camera_path_, other->camera_path_);
    std::swap(camera_matrix_, other->camera_matrix_);
    std::swap(camera_distortion_, other->camera_distortion_);
    std::swap(fps_, other->fps_);
    std::swap(resolution_, other->resolution_);
    std::swap(auto_exposure_, other->auto_exposure_);
    std::swap(exposure_value_, other->exposure_value_);
    std::swap(exposure_time_, other->exposure_time_);
    std::swap(auto_white_balance_, other->auto_white_balance_);
    std::swap(auto_gain_, other->auto_gain_);
    std::swap(contrast_, other->contrast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera_descriptor_;
  metadata.reflection = Camera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cameras::kCameraFieldNumber;
#endif  // !_MSC_VER

Cameras::Cameras()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_camera.Cameras)
}

void Cameras::InitAsDefaultInstance() {
}

Cameras::Cameras(const Cameras& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_camera.Cameras)
}

void Cameras::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cameras::~Cameras() {
  // @@protoc_insertion_point(destructor:roborts_camera.Cameras)
  SharedDtor();
}

void Cameras::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cameras::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cameras::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cameras_descriptor_;
}

const Cameras& Cameras::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5fparam_2eproto();
  return *default_instance_;
}

Cameras* Cameras::default_instance_ = NULL;

Cameras* Cameras::New() const {
  return new Cameras;
}

void Cameras::Clear() {
  camera_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cameras::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_camera.Cameras)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roborts_camera.Camera camera = 1;
      case 1: {
        if (tag == 10) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_camera;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_camera.Cameras)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_camera.Cameras)
  return false;
#undef DO_
}

void Cameras::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_camera.Cameras)
  // repeated .roborts_camera.Camera camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camera(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_camera.Cameras)
}

::google::protobuf::uint8* Cameras::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_camera.Cameras)
  // repeated .roborts_camera.Camera camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camera(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_camera.Cameras)
  return target;
}

int Cameras::ByteSize() const {
  int total_size = 0;

  // repeated .roborts_camera.Camera camera = 1;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cameras::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cameras* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cameras*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cameras::MergeFrom(const Cameras& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_.MergeFrom(from.camera_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cameras::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cameras::CopyFrom(const Cameras& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cameras::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->camera())) return false;
  return true;
}

void Cameras::Swap(Cameras* other) {
  if (other != this) {
    camera_.Swap(&other->camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cameras::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cameras_descriptor_;
  metadata.reflection = Cameras_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_camera

// @@protoc_insertion_point(global_scope)
